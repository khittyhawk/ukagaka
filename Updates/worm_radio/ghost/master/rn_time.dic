                                                  
//---------------------------------------------------------------                                                 
//            .--. __  __   ___         __.....__      
//            |__||  |/  `.'   `.   .-''         '.    
//        .|  .--.|   .-.  .-.   ' /     .-''"'-.  `.  
//      .' |_ |  ||  |  |  |  |  |/     /________\   \ 
//    .'     ||  ||  |  |  |  |  ||                  | 
//   '--.  .-'|  ||  |  |  |  |  |\    .-------------' 
//      |  |  |  ||  |  |  |  |  | \    '-.____...---. 
//      |  |  |__||__|  |__|  |__|  `.             .'  
//      |  '.'                        `''-...... -'    
//      |   /                                          
//      `'-'                                           
//----------------------------------------------------------------




daychange
{
	autoupdates[0] = 0
	highesttemp = ""
	dawntime = ""
	dusktime = ""
	dawnsec = ""
	dusksec = ""
	weatherless = no_sun
	--
	"\![raise,OnMoonphase]"
	--
	"\![updatebymyself,checkonly]"
	--
	if autoupdates[1] == 1
	//if you told the user yesterday
	{
		autoupdates[1] = 2
		//now you can tell the user today
	}
	elseif updortresult[0] == "success"
	{
		autoupdates[0] = 1
		//there is an update in queue
	}
	--
	if get_j == "On"
	{
		OnJacobinMonths
	}
	--
	if optweather == "On" 
	{
		OnGetSomeWeather
	}
}

hcal_change
{
	LOGGING("Hebrew calendar check===================")
	if get_h == "On"
	//I decided to check whether the user has the Hebrew calendar activated here rather than have this^ same if check repeated in code everywhere
	{
		OnHebrewCal
		//this^ calls the api which gives the ghost the calendar date
		--
		ishebrewholiday
	}
}


OnSecondChange
// (＾＾)ｂ Inbuilt!
{
	if spamon == 1
	{
		OnGloriousSpam
	}
	--
	_b = BalloonCheck
	if stopfunction == 2 && _b == 0
	{
		stopfunction = 0
	}
	--
	if stopfunction == 0
	{
		LOGGING("we are stopppppp")
		_sec = GETSECCOUNT()
		_diff = _sec - SHIORI3FW.LastAITalkTime
		if _diff >= aitalkinterval
		{
			LOGGING("i can speakkkkkk")
			if (_sec - SHIORI3FW.LastTalkTime) >= 6
			{
				LOGGING("dunno what this thing doessssss")

				slowthefdown = 1
			}
		}
	}
	--
	if reference2 == 1
	{
		//if overlapping
		if huggingboats != 1
		{
			overlaptalk
			huggingboats = 1
		}
	}
	else
	{
		huggingboats = 0
	}
	--
	if runtime[2] >= 59
	{
		runtime[2] = 0
		runtime[1]++
		if runtime[1] >= 59
		{
			runtime[1] = 0
			runtime[0]++
			totalhours++
		}
	}
	else
	{
		runtime[2]++
	}
}

OnMinuteChange
// (＾＾)ｂ Inbuilt!
{
	//time since midnight
	cursec = (hour*60*60) + (minute*60)
	_isdawn = cursec - dawnsec
	_isdusk = cursec - dusksec
	
	if dawntime != "" && dawntime != 'Unk'
	{
		if dusktime != "" && dusktime != 'Unk'
		{
			if cursec > dawnsec && cursec < dusksec
			{
				dayornight = 'day'
			}
			else
			{
				dayornight = "night"
			}
		}
		else
		{
			if cursec > dawnsec && hour < 18
			{
				dayornight = "day"
			}
			else
			{
				dayornight = "night"
			}
		}
	}
	elseif dusktime != "" && dusktime != 'Unk'
	{
		if hour >= 6 && cursec < dusksec
		{
			dayornight = "day"
		}
		else
		{
			dayornight = "night"
		}
	}
	else
	{
		if hour >= 6 && hour < 18
		{
			dayornight = "day"
		}
		else
		{
			dayornight = "night"
		}
	}
	--
	if remindme == "Allowed" || remindme != "Allowed"
	{
		if (_isdawn > -1800) && (_isdawn < 1800)
		{
			dawnduskmenu = "dawn"
		}
		elseif (_isdusk > -1800) && (_isdusk < 1800)
		{
			dawnduskmenu = "dusk"
		}
		else
		{
			dawnduskmenu = "    "
		}
	}
	--
	if minute == 0
	{
		if hour == 0
		{
			daychange
		}
		elseif hour == 18
		//the Hebrew day rolls over at 1800, not 000
		{
			hcal_change
		}
		--
		Select.hourtell
	}
	--
	if pauseweather[0] == 1
	{
		if pauseweather[1] < 10
		{
			pauseweather[1] += 1
		}
		else
		{
			pauseweather = (0,0)
			OnGetSomeWeather
		}
	}
}

Select.hourtell
{
	_isdawn = cursec - dawnsec
	_isdusk = cursec - dusksec
	--
	if remindhr == "On"
	{
		"It is the hour %hour\n"
		--
		if _isdawn < 0
		//if it's before dawn
		{
			_abs = TOINT(SQRT(POW(_isdawn,2)))
			if _abs > 3600
			{
				_hrs = _abs/3600
				"Dawn will arrive in %_hrs hours"
			}
			else
			{
				_mins = _abs/60
				"Dawn will arrive in %_mins minutes"
			}
			--
			".\n"
		}
		elseif _isdusk < 0
		//if it's before dusk
		{
			_abs = SQRT(POW(_isdusk,2))
			if _abs > 3600
			{
				_hrs = TOINT(ROUND(_abs/3600))
				"It is %_hrs hours until dusk"
			}
			else
			{
				_mins = TOINT(_abs/60)
				"It is %_mins minutes until dusk"
			}
			--
			".\n"
		}
	}
	--
	if optweather == "On"
	{
		"\x"
		--
		OnGetSomeWeather
	}
	elseif weirdweather == 1
	{
		"\C%(Select.weather_less)"
	}
}


/*
function Simple(year,month,day)
//http://www.ben-daglish.net/moon.shtml
{
	var lp = 2551443; 
	var now = new Date(year,month-1,day,20,35,0);						
	var new_moon = new Date(1970, 0, 7, 20, 35, 0);
	var phase = ((now.getTime() - new_moon.getTime())/1000) % lp;
	return Math.floor(phase /(24*3600)) + 1;
}
*/
OnMoonphase
{
	LOGGING("reference is %(reference0) and args are %(_argc)")
	LOGGING("the reference type is %(GETTYPE(reference0)) and the second element is %(reference0[1])")
	
	testvar = reference0
	
	_lp = 2551443
	//dunno what this is for - leap year?
	
	//starting new moon will be jan 7, 1970, at 20:35:00
	//let's make sure we evaluate that with the correct number of hours and minutes
	//so this will be the seconds since 01/01/1970 00:00:0
	_newestmoon = (GETSECCOUNT(1970,1,7,,20,35,0))
	//610500

	_nownewmoon = GETSECCOUNT(year,month,day,,20,35,0)
	//1638754500
	
	if reference0[1] != ""
	{
		_nownewmoon = GETSECCOUNT(reference0[0],reference0[1],reference0[2],,20,35,0)
		LOGGING("the moon is right============")
	}
	else
	{
		moonmoon = IARRAY
	}

	_phase = (_nownewmoon-_newestmoon)%_lp
	//difference = 1638144000
	//after modulo = 117594
	_moonmainder = ((_phase/(24*3600))+1)
	
	LOGGING("%_moonmainder is the moonmainder")
	
	//now to put together the illumination
	_interval = 29.53058770576
	_fullness = (_interval/2)

	_illumination = (_moonmainder/_fullness)
	LOGGING("the illumination of the moon is %(_illumination)")
	
	_moonmath = "ready"
	_lumperc = TOINT(ROUND(_illumination*100))

	case _illumination
	{
		when 0.3-0.45
		{
			LOGGING("the crescent is here")
			_moonmath = "waxing crescent"
		}
		when 0.45-0.55
		{
			_moonmath = "first quarter"
		}
		when 0.55-0.8
		{
			_moonmath = "waxing gibbous"
		}
		when 0.8-1.3
		{
			_moonmath = "full moon"
		}
		when 1.3-1.45
		{
			_moonmath = "waning gibbous"
		}
		when 1.45-1.55
		{
			_moonmath = "last quarter"
		}
		when 1.55-1.8
		{
			_moonmath = "waning crescent"
		}
		others
		{
			_moonmath = "new moon"
		}
	}
	--
	if reference0[1] != ""
	{
		LOGGING("the moon math is attained: %(_moonmath)")
		_moonmath ,= _lumperc
		_moonmath
	}
	else
	{
		moonmoon = (_moonmath,_lumperc)
	}
}



//Jacobin Calendar
/*

 _______                _     _       
(_______)              | |   (_)      
     _ _____  ____ ___ | |__  _ ____  
 _  | (____ |/ ___) _ \|  _ \| |  _ \ 
| |_| / ___ ( (__| |_| | |_) ) | | | |
 \___/\_____|\____)___/|____/|_|_| |_|
                                      

*/

OnJacobinMonths
{
	_yr = GETTIME()[0]
	_mn = GETTIME()[1]
	_dy = GETTIME()[2]

	LOGGING("%(_argv) and %reference====")
	
	_timegoneby = (jcal_passed,yearsince)
	
	if _argv[0] != ""
	{
		_yr = _argv[0]
		_mn = _argv[1]
		_dy = _argv[2]
		LOGGING("year is %(_argv[0])")
		LOGGING("month is %(_argv[1])")
		LOGGING("day is %(_argv[2])")
		_timegoneby = OnPastEquinox(_yr,_mn,_dy)
	}
	else
	{
		OnPastEquinox
	}
	
	_jcal_passed = _timegoneby[0]
	_yearsince = _timegoneby[1]
	
	_jmonth = (_jcal_passed/30)
	_jdate = (_jcal_passed%30)
	LOGGING("=====================")
	LOGGING(_jmonth)
	LOGGING("=====================")
	Jacobin_days = ("décadi","primidi","duodi","tridi","quartidi","quintidi","sextidi","septidi","octidi","nonidi")
	jacobin_months_all = ("Vendémiaire","Brumaire","Frimaire","Nivôse","Pluviôse","Ventôse","Germinal","Floréal","Prairial","Messidor","Thermidor","Fructidor")
	
	case _jmonth
	{
		when 0
		{
			//Vendémiaire
			jdays = ("","grape","saffron","chestnut","autumn crocus","horse","impatiens","carrot","amaranth","parsnip","vat","potato","strawflower","winter squash","mignonette","donkey","four o'clock flower","pumpkin","buckwheat","sunflower","wine-press","hemp","peach","turnip","amaryllis","ox","eggplant","chili pepper","tomato","barley","barrel")
		}
		when 1
		{
			//Brumaire
			jdays = ("","apple","celery","pear","beetroot","goose","heliotrope","common fig","black salsify","checker tree","plough","salsify","water caltrop","jerusalem artichoke","endive","turkey","skirret","watercress","leadworts","pomegranate","harrow","baccharis","azarole","madder","orange","pheasant","pistachio nut","tuberous pea","quince","service tree","roller")
		}
		when 2
		{
			//Frimaire
			jdays = ("","rampion","cattle turnip","chicory","medlar","pig","lamb's lettuce","cauliflower","honey","juniper","pickaxe","wax","horseradish","cedar tree","fir","roe deer","gorse","cypress tree","ivy","savin juniper","grub-hoe","sugar maple","heather","reed plant","sorrel","cricket","pine nut","cork","truffle","olive","shovel")
		}
		when 3
		{
			//Nivôse
			jdays = ("","peat","coal","bitumen","sulphur","dog","lava","topsoil","manure","saltpeter","flail","granite","clay","slate","sandstone","rabbit","flint","marl","limestone","marble","winnowing fan","gypsum","salt","iron","copper","cat","tin","lead","sinc","mercury","sieve")
		}
		when 4
		{
			//Pluviôse
			jdays = ("","spurge-laurel","moss","butcher's broom","snowdrop","bull","laurustinus","tinder polypore","daphne mezereum","poplar","axe","hellebore","broccoli","bay laurel","filbert","cow","box tree","lichen","yew tree","lungwort","billhook","pennycress","rose daphne","couch grass","common knotgrass","hare","woad","hazel","cyclamen","celandine","sleigh")
		}
		when 5
		{
			//Ventôse
			jdays = ("","coltsfoot","dogwood","matthiola","privet","billygoat","wild ginger","italian buckthorn","violet","goat willow","spade","narcissus","elm","common fumitory","hedge mustard","goat","spinach","doronicum","pimpernel","chervil","gardner's line","mandrake","parsley","scurvy-grass","daisy","tuna","dandelion","wood anemone","maidenhair fern","ash tree","dibber")
		}
		when 6
		{
			//Germinal
			jdays = ("","primrose","plane tree","asparagus","tulip","hen","chard","birch","daffodil","alder","incubator","periwinkle","hornbeam","morel","beech tree","bee","lettuce","larch","hemlock","radish","hive","judas tree","romaine lettuce","horse chestnut","arugula","pigeon","lilac","anemone","pansy","bilberry","grafting knife")
		}
		when 7
		{
			//Floréal
			jdays = ("","rose","oak tree","fern","hawthorne","nightingale","common columbine","lily of the valley","button mushroom","hyacinth","rake","rhubarb","sainfoin","wallflower","fan palm tree","silkworm","comfrey","salad burnet","basket of gold","orache","weeding hoe","sea thrift","fritillary","borage","valerian","carp","spindle","chive","bugloss","white mustard","shepherd's crook")
		}
		when 8
		{
			//Prairial
			jdays = ("","alfalfa","daylily","clover","angelica","duck","lemon balm","oat grass","martagon lily","wild thyme","scythe","strawberry","betony","pea","acacia","quail","carnation","elderberry","poppy plant","linden","pitchfork","cornflower","camomile","honeysuckle","bedstraw","tench","jasmine","verbena","thyme","peony","hand cart")
		}
		when 9
		{
			//Messidor
			jdays = ("","rye","oat","onion","speedwell","mule","rosemary","cucumber","shallot","wormwood","sickle","coriander","artichoke","clove","lavender","chamois","tobacco","redcurrant","hairy vetchling","cherry","park","mint","cumin","bean","alkanet","guineafowl","sage","garlic","tare","wheat","shawn")
		}
		when 10
		{
			//Thermidor
			jdays = ("","spelt","common mullein","melon","ryegrass","ram","horsetail","mugwort","safflower","blackberry","watering can","foxtail millet","common glasswort","apricot","basil","ewe","marsh mallow","flax","almond","gentian","lock","carline thistle","caper","lentil","inula","otter","myrtle","canola","lupin","cotton","mill")
		}
		when 11
		{
			//Fructidor
			jdays = ("","plum","millet","puffball","six-row barley","salmon","tuberose","winter barley","apocynum","licorice","ladder","watermelon","fennel","european barberry","walnut","trout","lemon","teasel","buckthorn","mexican marigold","harvesting basket","wild rose","hazelnut","hops","sorghum","crayfish","bitter orange","goldenrod","maize","sweet chestnut","pack basket")
		}
		others
		{
			//complementary days
			jdays = ("Celebration of Virtue","Celebration of Talent","Celebration of Labor","Celebration of Convictions","Celebration of Honors","Celebration of the Revolution")
		}
	}
	
	_jmd = (jacobin_months_all[_jmonth],jdays[_jdate])
	_decadi = Jacobin_days[(_jdate%10)]
	
	_jyear = OnRomanNumerals(_yearsince)
	
	_acollection = (_jmonth,_jmd[0],_jdate,_jmd[1],_decadi,_jyear)
	
	if _argv[0] == ""
	{
		jmonth = _jmonth
		jdate = _jdate
		jmd = _jmd
		decadi = _decadi
		jyear = _jyear
	}
	else
	{
		_acollection
	}
}


OnEquinoxDate
{
	_yr = GETTIME()[0]
	
	LOGGING("%(_yr)=============")
	LOGGING("%(_argv[0])=============")
	
	if _argv[0] != ""
	{
		_yr = _argv[0]
		LOGGING("%GETTYPE(_argv[0])")
	}
	
	LOGGING("%(_yr)=============")
	regex_date = "\s+(\d{4}).*9\/(\d{2,3})\s{0,3}(\d+):"
	_file = "var\\srevents.cgi"
	_buff = ""
	
	_j1 = ""
	_j0 = ""
	
	FCHARSET(1)
	
	if FOPEN(_file,'r')
	{
		//LOGGING("opening==============")
		for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file)
		{
			//LOGGING("reading==============")
			if RE_SEARCH (_buff, regex_date)
			{
				//LOGGING("searching==============")
				//LOGGING("string is %(RE_GETSTR[1])==============")
				//LOGGING("yr is %(_yr)==============")
				//set the equinox for the current year
				if TOINT(RE_GETSTR[1]) == _yr
				{
					LOGGING("year is %(RE_GETSTR[1])==============")
					//if the hour is 2300, add one for CEST and get the day after
					if TOINT(RE_GETSTR[3]) != 23
					{
						_j1 = RE_GETSTR[2]
					}
					else
					{
						_j1 = TOINT(RE_GETSTR[2])+1
					}
					LOGGING("j1 is %(_j1)====================")
				}
				//set the equinox for the previous year
				elseif TOINT(RE_GETSTR[1]) == (_yr-1)
				{
					LOGGING("last year is %(RE_GETSTR[1])==============")
					//if the hour is 2300, add one for CEST and get the day after
					if TOINT(RE_GETSTR[3]) != 23
					{
						_j0 = RE_GETSTR[2]
					}
					else
					{
						_j0 = TOINT(RE_GETSTR[2])+1
					}
				}
			}
		}
	}
	--
	FCLOSE(_file)
	_equinoxes = (_j1,_j0)
	
	if _argv[0] == ""
	{
		j1 = _j1
		j0 = _j0
	}
	else
	{
		_equinoxes
	}
	
	LOGGING("%(_j0) and %(_j1)==============")
	//LOGGING("j0 is %(j0) and j1 is %(j1)==============")
	LOGGING("%(_equinoxes)==============")
	
}

OnPastEquinox
{
	
	_yr = GETTIME()[0]
	_mn = GETTIME()[1]
	_dy = GETTIME()[2]

	LOGGING("Past Equinox %(_argv) and %reference====")
	
	_j0 = j0
	_j1 = j1
	
	if _argv[0] != ""
	{
		_yr = TOINT(_argv[0])
		_mn = TOINT(_argv[1])
		_dy = TOINT(_argv[2])
		LOGGING("year is %(_argv[0])")
		LOGGING("month is %(_argv[1])")
		LOGGING("day is %(_argv[2])")
		_equinoxes = OnEquinoxDate(_yr)
		_j0 = TOINT(_equinoxes[0])
		_j1 = TOINT(_equinoxes[1])
	}
	else
	{
		OnEquinoxDate
	}

	LOGGING("%(_j0) and %(_j1)==============")
	//LOGGING("j0 is %(j0) and j1 is %(j1)==============")

	LOGGING("final year is %(_yr)")
	LOGGING("final month is %(_mn)")
	LOGGING("final day is %(_dy)")
	
	_sept_left = (30-_j1)+1
	_sept_left0 = (30-_j0)+1
	LOGGING("%(_sept_left) is the days left in september and %(_dy) are the days of this current month")
	LOGGING("%(_sept_left0) is the days left in september and %(_dy) are the days of this current month")
	_jcal_passed = 0
	_yearsince = 0
	
	if _mn > 9
	{
		//if it's past september
		for _val = 10; _val < _mn; _val++
		{
			LOGGING("the month is %(_val), which has %(md(_val)) days")
			_jcal_passed += md(_val)
			_yearsince = (_yr-1791)
		}
		
		_jcal_passed = _jcal_passed + _sept_left + _dy
		
		
	}
	elseif _mn < 9
	{
		//if it's before september
		for _val = 10; _val <= 12; _val++
		{
			_jcal_passed += md(_val)
		}
		for _val = 1; _val < _mn; _val++
		{
			_jcal_passed += md(_val)
		}
		
		_jcal_passed = _jcal_passed + _sept_left0 + _dy
		_yearsince = (_yr-1792)
		LOGGING("there have been %(_jcal_passed) days since last year=======")
	}
	else
	{
		LOGGING("day is %(_dy) and last year's equinox is %(_j1)")
		LOGGING("day is %GETTYPE(_dy) and last year's equinox is %GETTYPE(_j1)")
		//if it is september
		if _dy > _j1
		{
			LOGGING("it is past the equinox===========")
			//if it's past the equinox
			_jcal_passed = _dy - _j1
			_yearsince = (_yr-1791)
		}
		elseif _dy < _j1
		{
			LOGGING("it is before the equinox=============")
			//if it's before the equinox
			for _val = 10; _val <= 12; _val++
			{
				_jcal_passed += md(_val)
			}
			for _val = 1; _val < _mn; _val++
			{
				_jcal_passed += md(_val)
			}

			_jcal_passed = _jcal_passed + _dy + _sept_left0
			_yearsince = (_yr-1792)
		}
		else
		{
			//if it is the equinox
			_jcal_passed = 0
			_yearsince = (_yr-1791)
		}
	}
	--
	_jcal_passed += 1
	
	_timegoneby = (_jcal_passed,_yearsince)
	
	if _argv[0] == ""
	{
		jcal_passed = _jcal_passed
		yearsince = _yearsince
	}
	else
	{
		_timegoneby
	}
}


//---------------------------
//The Hebrew calendar
//---------------------------
/***
 *      _    _      _                       
 *     | |  | |    | |                      
 *     | |__| | ___| |__  _ __ _____      __
 *     |  __  |/ _ \ '_ \| '__/ _ \ \ /\ / /
 *     | |  | |  __/ |_) | | |  __/\ V  V / 
 *     |_|  |_|\___|_.__/|_|  \___| \_/\_/  
 *                                          
 *                                          
 */


OnHebrewCal
{
	LOGGING("%funcalendarfun is the calendar fun when you open the function")
	
	_year = GETTIME[0]
	_month = GETTIME[1]
	_day = GETTIME[2]
	
	_filename1 = 'hcal1.html'
	_filename2 = 'hcal2.html'
	
	if _argv[0] != ""
	{
		_year = _argv[0][0]
		_month = _argv[0][1]
		_day = _argv[0][2]
		
		_filename1 = 'funnow.html'
		_filename2 = 'funnext.html'
	}
	
	_url = "https://www.hebcal.com/converter?cfg=xml&gy=" + _year + "&gm=" + _month + "&gd=" + _day + "&g2h=1"
	//the GETTIME array is so so useful. it stores pretty much everything you might want about the current day of the gregorian calendar. all you need to know right now is that the current year is in slot [0], the month is in slot [1], and the day is in slot [2]
	
	--
	"\![execute,http-get,%(_url),--async=OnReadH,--file=%(_filename1),--timeout=200,--reference=today]"
	//this checks the website, plugs the result into a html file, then calls the function to evaluate which hebrew date corresponds to this pre-1800 georgian date
	
	--
	_return = tomorrowis(_year,_month,_day)
	
	_url2 = "https://www.hebcal.com/converter?cfg=xml&gy=" + _return[2] + "&gm=" + _return[0] + "&gd=" + _return[1] + "&g2h=1"
	--
	"\![execute,http-get,%(_url2),--async=OnReadH,--file=%(_filename2),--timeout=200]"
	--
}



OnReadH
{
	LOGGING("%funcalendarfun is the calendar fun when you look at the url")
	_incomingurl = SPLIT(reference3,'/')
	_lengthurl = ARRAYSIZE(_incomingurl)
	
	_filename = _incomingurl[_lengthurl-1]
	
	_file = "var\\%(_filename)"
	_buff = ""
	
	_output = ''
	
	FCHARSET(1)
	
	if FOPEN(_file,'r')
	{
	    for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file)
		{
			_output += _buff
		}
	}
	
	_h_cal = SPLIT(_output,'"')
	
	_h_year = _h_cal[9]
	_h_month = _h_cal[11]
	_h_day = _h_cal[13]
	
	if SUBSTR(_h_month,0,2) == "Sh"
	{
		_h_month = "Shevat"
	}
	--
	
	if _filename == "hcal1.html"
	{
		hyear = _h_year
		hmonth = _h_month
		hday = _h_day
	}
	elseif _filename == "hcal2.html"
	{
		hyear6 = _h_year
		hmonth6 = _h_month
		hday6 = _h_day
	}
	else
	{
		funcalendarfun ,= (_filename,_h_year,_h_month,_h_day)
		LOGGING("%ARRAYSIZE(funcalendarfun) should be first")
		
		--
		LOGGING("%funcalendarfun is the calendar fun while in the eval function")
		if ARRAYSIZE(funcalendarfun) > 4
		{
			LOGGING("%ARRAYSIZE(funcalendarfun) should be second")
			"%(lookity)"
		}
	}
	--
	FCLOSE(_file)
}


ishebrewholiday
{
	hgreet = 0
	//this is a personal variable that determines whether the ghost has given the user a holiday greeting yet or not.
	--
	isholiday = 1
	//i have this variable (which determines if it is a jewish holiday) set automatically so i don't have to keep calling it if it *is* a holiday. if the dates don't match up, i simply set this to 0 in the else statement.
	--
	if TOLOWER(h_m) == "nisan"
	{
		case h_d
		{
			when 15-22
			{
				ispesach = 1
			}
			others
			{
				isholiday = 0
			}
		}
	}
	elseif TOLOWER(h_m) == "sivan"
	{
		if h_d == 5
		{
			isshavuot = 1
		}
		elseif h_d == 6
		{
			isshavuot = 2
		}
		elseif h_d == 7
		{
			isshavuot = 3
		}
		else
		{
			isholiday = 0
		}
	}
	elseif TOLOWER(h_m) == "tishrei"
	{
		if h_d == 1
		{
			isrosh = 1
		}
		elseif h_d == 2
		{
			isrosh = 2
		}
		elseif h_d == 9
		{
			isyom = 1
		}
		elseif h_d == 10
		{
			isyom = 2
		}
		elseif h_d == 14
		{
			issukkot = -1
		}
		elseif h_d == 15
		{
			issukkot = 1
		}
		elseif h_d == 16
		{
			issukkot = 2
		}
		elseif h_d == 17
		{
			issukkot = 3
		}
		elseif h_d == 18
		{
			issukkot = 4
		}
		elseif h_d == 19
		{
			issukkot = 5
		}
		elseif h_d == 20
		{
			issukkot = 6
		}
		elseif h_d == 21
		{
			issukkot = 7
		}
		elseif h_d == 22
		{
			isshemini = 1
			//Shemini Atzeret
		}
		elseif h_d == 23
		{
			issimchat = 1
			//Simchat Torah
		}
		else
		{
			isholiday = 0
		}
	}
	elseif TOLOWER(h_m) == "kislev"
	{
		if h_d == 25
		{
			ishanu = 1
			//first night of Hanukkah
				
				
			//right so
			//the hebrew calendar is confusing and what days Hanukkah falls on depends on whether kislev has 29 or 30 days
			//in the meantime, i have the days that are accurate for this year. this will be tweaked to be more accurate when i figure out how to make the whole calendar work
			/*
			K25 = 1
			26 = 2
			27 = 3
			28 = 4
			29 = 5
			30/T1 = 6
			T1/2 = 7
			T2/3 = 8
			*/
		}
		elseif h_d == 26
		{
			ishanu = 2
		}
		elseif h_d == 27
		{
			ishanu = 3
		}
		elseif h_d == 28
		{
			ishanu = 4
		}
		elseif h_d == 29
		{
			ishanu = 5
		}
		elseif h_d == 30
		{
			ishanu = 6
		}
		else
		{
			isholiday = 0
			ishanu = 0
		}

	}
	elseif TOLOWER(h_m) == "tevet"
	{
		if h_d == 1
		{
			ishanu = 7
		}
		elseif h_d == 2
		{
			ishanu = 8
		}
		else
		{
			isholiday = 0
			ishanu = 0
		}
	}
	elseif TOLOWER(h_m) == "shevat"
	{
		if h_d == 15
		{
			istrees = 1
			//Tu Bishvat
		}
		else
		{
			isholiday = 0
		}
	}
	elseif "adar" _in_ TOLOWER(h_m)
	{
		if h_d == 14
		{
			ispurim = 1
		}
		else
		{
			isholiday = 0
		}
	}
	else
	{
		isholiday = 0
	}
	--
	if ishanu != 0
	{
		"%(s0)Tonight is the %(Ord(ishanu)) night of %(hrom).\w6 %(hbless)\n"
		hgreet = 1
	}
}


OnES
{
	_year = GETTIME()[0]
	
	if _argv[0] != ""
	{
		_year = _argv[0]
	}
	
	regex_spr = "\s+(\d{4}).*3\/(\d{2,3})\s{0,3}(\d+):"
	regex_sum = "\s+(\d{4}).*6\/(\d{2,3})\s{0,3}(\d+):"
	regex_aut = "\s+(\d{4}).*9\/(\d{2,3})\s{0,3}(\d+):"
	regex_win = "\s+(\d{4}).*12\/(\d{2,3})\s{0,3}(\d+):"
	
	_file = "var\\srevents.cgi"
	_buff = ""
	
	_spr = ""
	_sum = ""
	_aut = ""
	_win = ""
	
	FCHARSET(1)
	
	if FOPEN(_file,'r')
	{
		for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file)
		{
			if RE_SEARCH (_buff, regex_spr)
			{
				//spring equinox
				if TOINT(RE_GETSTR[1]) == _year
				{
					_spr = RE_GETSTR[2]
				}
			}
			if RE_SEARCH (_buff, regex_sum)
			{
				//summer solstice
				if TOINT(RE_GETSTR[1]) == _year
				{
					_sum = RE_GETSTR[2]
				}
			}
			if RE_SEARCH (_buff, regex_aut)
			{
				//autumn equinox
				if TOINT(RE_GETSTR[1]) == _year
				{
					_aut = RE_GETSTR[2]
				}
			}
			if RE_SEARCH (_buff, regex_win)
			{
				//winter solstice
				if TOINT(RE_GETSTR[1]) == _year
				{
					_win = RE_GETSTR[2]
				}
			}
		}
	}
	--
	FCLOSE(_file)
	--
	astro_events = (_spr,_sum,_aut,_win)
}
