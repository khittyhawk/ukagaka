
OnFileDropping
// (＾＾)ｂ Inbuilt!
{
	if reference1 == 0
	{
		sakuraresponse
	}
	elseif reference1 == 1
	{
		keroresponse
	}
}

OnFileDropEx
// (＾＾)ｂ Inbuilt!
{
	if reference1 == 0
	{
		sakuraresponse
	}
	elseif reference1 == 1
	{
		keroresponse
	}
}

OnDirectoryDrop
// (＾＾)ｂ Inbuilt!
{
	if reference1 == 0
	{
		sakuraresponse
	}
	elseif reference1 == 1
	{
		keroresponse
	}
}

Select.sakuraresponse
{
	if SHIORI3FW.ShellName == 'Radio'
	{
		"%(s0)\i[6]"
	}
	elseif SHIORI3FW.ShellName == 'Ship'
	{
		"\0\s[13]"
	}
	else
	{
		"%(s0)"
	}
}

Select.keroresponse
{
	"%(k0)%(lps(6))It creaks%(lps(6))"
}

OnUpdateDataCreating
// (＾＾)ｂ Inbuilt!
{
	"Something\w6\w6 %(adj) and\w6\w6 %(ger).\e"
}

OnUpdateDataCreated
// (＾＾)ｂ Inbuilt!
{
	"It is made whole.\e"
	"Pharmikon.\e"
}

OnNarCreating
// (＾＾)ｂ Inbuilt!
{
	ssp_downloads
	_obj = reference0
	_file = reference1
	_id = reference2
	"%(s0)\![set,balloonwait,1.3]I see %(_id)"
	--
	if ASEARCH(_id,dls) != -1
	{
		"\w5, one of ours"
	}
	--
	".\w5 It shall bear the scion's name of %(_obj)\w6, and it shall be tethered in Hecate's strands by %(_file)"
}

OnNarCreated
// (＾＾)ｂ Inbuilt!
{
	"%(s0)The act is seeded and wants to be borne.\e"
}

OnWallpaperChange
// (＾＾)ｂ Inbuilt!
{
	"%(s0)The world has sundered. Do you see the scar?\e"
}

OnURLDropped
// (＾＾)ｂ Inbuilt!
{
	"%(s0)A feed from another world%(lps(6))\e"
}

OnFailFail
{
	ssp_downloads
	_ntw = reference0
	--
	if ASEARCH(_ntw,ntw) == -1
	{
		" Scoremarks of knives bear the telltale runes: %(_ntw)."
	}
	elseif ASEARCH(_ntw,ntw) == 0
	{
		" It cries, and it cries, and its arms cast forth to reach us, but worlds we inhabit as too askew."
	}
	elseif ASEARCH(_ntw,ntw) == 1
	{
		" It is an impostor."
	}
	elseif ASEARCH(_ntw,ntw) == 2
	{
		" %(urname) has slain it."
	}
	elseif ASEARCH(_ntw,ntw) == 3
	{
		" Three numbers brand its pelt."
	}
	elseif ASEARCH(_ntw,ntw) == 4
	{
		" The beast it will feed has been slaked by anothere"
	}
	elseif ASEARCH(_ntw,ntw) == 5
	{
		" The knowledge is forbidden from insciption."
	}
	elseif ASEARCH(_ntw,ntw) == 6
	{
		" It tastes of poison.\e"
	}
	elseif ASEARCH(_ntw,ntw) == 7
	{
		" Into the maelstrom, but only to be drowned. No."
	}
	elseif ASEARCH(_ntw,ntw) == 8
	{
		" The doppelganger is arrested."
	}
	elseif ASEARCH(_ntw,ntw) == 9
	{
		" I read only lies and labyrinthine lacunae."
	}
}

OnURLDropFailure
// (＾＾)ｂ Inbuilt!
{
	_path = reference0
	_ntw = reference1
	"%(s0)The thread\w6, %(_path)\w6, has been severed."
	--
	OnFailFail(_ntw)
	--
	"\e"
}

OnInstallBegin
// (＾＾)ｂ Inbuilt!
{
	ssp_downloads
	if (SHIORI3FW.IsVisible[1] == 1)
	{
		"%(k0)Did you taste that?%(lps(6)) %(speed(1.1))Did you %(i)feel%(i0) that?"
	}
	--
	"%(s0)A course has been set. A weight has been laden. Entropy is increased.\n\n%(urname) has accepted the pact.\e"
	
}

OnInstallCompleteEx
// (＾＾)ｂ Inbuilt!
{
	_id = reference0
	_name = reference1
	_loc = reference2
	
	"%(s0)\![set,balloonwait,1.2]It bears the inscription %(_id)"
	--
	if ASEARCH(_id,dls) != -1
	{
		" It is one of ours."
	}
	--
	"\w8\w8 It broods in %(loc).\e"
	
}

OnInstallFailure
// (＾＾)ｂ Inbuilt!
{
	_fail = reference0
	"%(s0)\![set,balloonwait,1.2]It is stillborn."
	--
	if ASEARCH(_fail,fails) == -1
	{
		" We shall become haruspex, and discern %(_fail) from its bowels.\e"
	}
	elseif ASEARCH(_fail,fails) == 0
	{
		" The spell to give it breath is become garbled. It is only lifeless stone.\e"
	}
	elseif ASEARCH(_fail,fails) == 1
	{
		" It smothered in its teratomas.\e"
	}
	elseif ASEARCH(_fail,fails) == 2
	{
		" The architecture of its creation has foundered.\e"
	}
	elseif ASEARCH(_fail,fails) == 3
	{
		" %(urname) has slain it.\e"
	}
	elseif ASEARCH(_fail,fails) == 4
	{
		" The womb has broken before the quickening.\e"
	}
	elseif ASEARCH(_fail,fails) == 5
	{
		" It is protected by moldering wards.\e"
	}
}

OnInstallRefuse
// (＾＾)ｂ Inbuilt!
{
	_name = reference0
	_id = reference1
	_what = reference2
	"%(s0)%(speed(1.2))I cannot touch it. It bears the sigil of another.%(lps(8)) %(_name)\w6\w6, %(adj) and %(ger)\w6\w6, can bear the weight of %(_what)\w6\w6, this %(_id).\e"
}

OnInstallReroute
// (＾＾)ｂ Inbuilt!
{
	_name = reference0
	_id = reference1
	_what = reference2
	"%(s0)%(speed(1.2))I cannot touch it. It bears the sigil of another.%(lps(8)) %(_name)\w6\w6, %(adj) and %(ger)\w6\w6, can bear the weight of %(_what)\w6\w6, this %(_id).\e"
}


OnUpdateBegin
// (＾＾)ｂ Inbuilt!
{
	ssp_downloads
	"%(s0)All things are in flux. The atoms that made you are not the same as reside within you now.\n\n Will we be the same, once we have been changed? Is that even an intelligible question?\e"
}

OnUpdateReady
// (＾＾)ｂ Inbuilt!
{
	_changes = reference0
	if (SHIORI3FW.IsVisible[1] == 1)
	{
		"%(s0)%(_changes) made.%(k0)But how many changes is that\w5, truly?\w6%(s0)\n\nCan it even be known?\e"
	}
	else
	{
		"%(s0)%(_changes).\w5 But what is the true magnitude of such a number?\e"
	}
}

OnUpdateComplete
// (＾＾)ｂ Inbuilt!
{
	autoupdates = (0,0) //you have already reached the latest upd0rt
	_win = reference0
	if ASEARCH(_win,ntwyey) == -1
	{
		"%(s0)Some great deed has been achieved\w7, but the hero's name is forever lost."
	}
	elseif ASEARCH(_win,ntwyey) == 0
	{
		"%(s0)The princess has already been rescued from this castle.\e"
	}
	elseif ASEARCH(_win,ntwyey) == 1
	{
		_files = reference1
		_who = reference3
		"%(s0)The %(_who) has more pieces than it used to - %(ARRAYSIZE(_files)) more.\w7 Was it complete before?\w7 Things are either whole\w6, or they are not\w6, yes?\e"
	}
	--
	"\n\n%(s0)Would you like to behold a record of what has altered within us?\n\n/
	\q[See Changelog,OnShowLog]   \q[No thanks,Cancel]"
}

OnShowLog
{
	"\![open,file,changelog.txt]\e"
}

OnUpdateFailure
// (＾＾)ｂ Inbuilt!
{
	_ntw = reference0
	_culprit = reference1
	_who = reference3
	OnFailFail(_ntw)
	--
	"%(s0)%(_culprit) was the first to fall.\e"
}


//_remaining should be the number of the file that's giving the error, in the order they're being downloaded. currentfile will be the file path.
OnUpdate.OnMD5CompareFailure
// (＾＾)ｂ Inbuilt!
{
	_currentfile = SPLITPATH(reference0)[2] + SPLITPATH(reference0)[3] //This gets the name and extension of the offending file
	"%(s0)The '%(_currentfile)' foundered like a lame horse.\w8\w8\e"
}

OnSNTPBegin
// (＾＾)ｂ Inbuilt!
{
	"%(a1)Time isn't real.\e"
}

OnSNTPCompare
// (＾＾)ｂ Inbuilt!
{
	_diff = reference3

	if _diff != 0
	{
		"%(a1)%(urname), your fake time is less real than this fake time. Sync 'em?\n\n\q[Like a ship,script:\6]    \q[Nah\, I'm good,script:%(a1)\C\n\nEnjoy being fake, doof.\e]"
	}
	else
	{
		"%(a1)%(urname), your timepieces are equally fake.\e"
	}
}


OnSNTPCorrect
// (＾＾)ｂ Inbuilt!
{
	_diff = reference3
	
	if _diff != 0
	{
		"%(a1)Aha, you're a witch, %(urname). How else could you have stymied my attempts to defake your fake time?\e"
	}
	else
	{
		"%(a1)%(urname), your timepieces are now equally fake.\e"
	}
}

OnSNTPFailure
// (＾＾)ｂ Inbuilt!
{
	"%(a1)Time is so fake your attempt to sync up your fake timekeeping pieces broke.\w6\w6 Haha.\e"
}


OnBIFFBegin
// (＾＾)ｂ Inbuilt!
{
	"%(s0)More broadly cast%(lps(6))\e"
}

OnBIFFComplete
// (＾＾)ｂ Inbuilt!
{
	_s = ""
	_num = "its"
	if reference0 != 1
	{
		_s = "s"
		_num = "their"
	}
	--
	"%(s0) %reference0 thread%(_s) broadly cast and found %(_num) way into your snare.\w8 Shall I name them for you?\n\n\q[Yes,script:%(_namemails)]  \q[No,script:\e]"
	
	_namemails = reference7
}

OnBIFFFailure
// (＾＾)ｂ Inbuilt!
{
	"%(s0)The scream of the universe's primal birth has interrupted Hecate's net. They vibrate in the form of %reference0. Perhaps your POP settings are incorrect?\e"
}


OnBatteryLow
// (＾＾)ｂ Inbuilt!
{
	"%(s0)Dallying with nonexistence, are we?\e"
}

OnBatteryCritical
// (＾＾)ｂ Inbuilt!
{
	"%(a1)Plug in your damn computer, %(urname).\e"
}

OnSetVar
{
	LOGGING("%reference0 and %reference1=====")
	if reference1 == "_+"
	{
		EVAL("%(reference0)++")
		LOGGING("%reference0 and %reference1=====")
	}
	elseif reference1 == "_-"
	{
		EVAL("%(reference0)--")
		LOGGING("%reference0 and %reference1=====")
	}
	else
	{
		void EVAL("%(reference0)=%(reference1)")
	}
}
//ISFUNC()
//ISVAR()
/*


    0: Function does not exist
    1: User function exists
    2: System function exists
*/



OnKeyPress
// (＾＾)ｂ Inbuilt!
{
	if reference0 == 'r'
	{
		OnLastTalk
	}
	elseif reference0 == 't'
	{
		OnAiTalk
	}
}

On_installedshellname
// (＾＾)ｂ Inbuilt! (kind've)
{
	abalone = reference
	labalone = ARRAYSIZE(abalone)
}

On_otherghostname
// (＾＾)ｂ Inbuilt! (kind've)
{
	ghostexlist = reference
	ghostexcount = ARRAYSIZE(ghostexlist)
}

On_installedballoonname
// (＾＾)ｂ Inbuilt! (kind've)
{
	balloonlist = reference
	ballooncount = ARRAYSIZE(balloonlist)
}


OnNotifyFontInfo
// (＾＾)ｂ Inbuilt!
{
	thesefonts = ARRAYSIZE(reference)
	morefonts = ASORT(reference)

}

OnBalloonChange
// (＾＾)ｂ Inbuilt!
{
	if balloontest == 1
	{
		balloontest = 0
		OnBalloonTest
	}
}



OnUpdateCheckResult : void
// (＾＾)ｂ Inbuilt!
{
	updortresult = ("success",reference1)

}

OnUpdateCheckFailure : void
// (＾＾)ｂ Inbuilt!
{
	updortresult = ("failure",reference0)
}

OnVanished
// (＾＾)ｂ Inbuilt!
{
	if SHIORI3FW.IsVisible[1] == 1
	{
		"%(k0)\![set,balloonwait,0.4]What was that?\w6 What was that?\w6 What was that?\w6"
	}
	--
	"%(s0)\![set,balloonwait,1.5]%(billdoor).\e"
}

OnOtherGhostVanished
// (＾＾)ｂ Inbuilt!
{
	if SHIORI3FW.IsVisible[1] == 1
	{
		"%(k0)\![set,balloonwait,0.4]What was that?\w6 What was that?\w6 What was that?\w6"
	}
	--
	"%(s0)\![set,balloonwait,1.5]%(billdoor).\e"
}


OnTestW
{
	"\b2\_qHow long (in ms) to pause?\n\n/
	\![*]\q[50 (w1),OnTestPause,1]\n/
	\![*]\q[100 (w2),OnTestPause,2]\n/
	\![*]\q[150 (w3),OnTestPause,3]\n/
	\![*]\q[200 (w4),OnTestPause,4]\n/
	\![*]\q[250 (w5),OnTestPause,5]\n/
	\![*]\q[300 (w6),OnTestPause,6]\n/
	\![*]\q[350 (w7),OnTestPause,7]\n/
	\![*]\q[400 (w8),OnTestPause,8]\n/
	\![*]\q[450 (w9),OnTestPause,9]\n/
	\![*]\q[Custom amount?,OnTestPause,custom]\n\n/
	\![*]\q[Tools Menu,funstuff]    \![*]\q[Cancel,Cancel]"

}	

OnTestPause
{
	_interval = reference0
	_valuec = ""
	_valuep = ""
	if _interval == "custom"
	{
		"\![open,inputbox,OnTestPause,-1,--text=Enter an integer]"
	}
	elseif GETTYPE(_interval) != 1
	{
		"\![open,inputbox,OnTestPause,-1,--text=Enter an integer]"
	}
	elseif _interval < 10
	{
		_valuec = INSERT(",\w",3,TOSTR(_interval))
		_valuep = INSERT(".\w",3,TOSTR(_interval))
		
		_talk = Select.wordswordswords

		_talk = REPLACE(_talk,'.',_valuep)
		_talk = REPLACE(_talk,',',_valuec)
		--
		"%(_talk)\n\n"
	}
	else
	{
		_valuec = INSERT(",\_w[]",5,TOSTR(_interval))
		_valuep = INSERT(".\_w[]",5,TOSTR(_interval))
		
		_talk = Select.wordswordswords

		_talk = REPLACE(_talk,'.',_valuep)
		_talk = REPLACE(_talk,',',_valuec)
		--
		"%(_talk)\n\n"
	}
	--
	OnTestW
}


//:'##:::::'##:'########::::'###::::'########:'##::::'##:'########:'########::
//: ##:'##: ##: ##.....::::'## ##:::... ##..:: ##:::: ##: ##.....:: ##.... ##:
//: ##: ##: ##: ##::::::::'##:. ##::::: ##:::: ##:::: ##: ##::::::: ##:::: ##:
//: ##: ##: ##: ######:::'##:::. ##:::: ##:::: #########: ######::: ########::
//: ##: ##: ##: ##...:::: #########:::: ##:::: ##.... ##: ##...:::: ##.. ##:::
//: ##: ##: ##: ##::::::: ##.... ##:::: ##:::: ##:::: ##: ##::::::: ##::. ##::
//:. ###. ###:: ########: ##:::: ##:::: ##:::: ##:::: ##: ########: ##:::. ##:
//::...::...:::........::..:::::..:::::..:::::..:::::..::........::..:::::..::




OnLoc
{
	"\C\_q\n\n%(s0)To activate this feature, please go to \_a[https://www.wunderground.com/]Weather Underground\_a, search your location, and input the URL:\n/
	\nNote: this feature will not work if another website is entered./
	\![open,inputbox,OnWeathering,-1]"							  
}


OnWeathering
{
	if TOLOWER(reference0) == "nowhere"
	{
		optweather = "On?"
		curloc = ("Nowhere","NW")
		weatherfromnowhere = 1
		if weatherless == ""
		{
			weatherless = no_sun
		}
		--
		OnMenuRunPre
	}
	else
	{
		weatherurl = reference0
		_urlsize = SPLIT(weatherurl,'/')
		--
		if ARRAYSIZE(_urlsize) > 6
		{
			LOGGING("specific station=============")
		}
		else
		{
			LOGGING("good size===========")
		}
		--
		curloc = (Capitalize(weatherurl[6,'/']),TOUPPER(weatherurl[5,'/']))
		optweather = "On"
		--
		OnRegWeather
	}
}

OnRegWeather
{
	regex = IARRAY
	_file = "var\\testregex.txt"
	_buff = ""
	FCHARSET(1)
	_i = 0
    if FOPEN(_file,'r')
	{  
        for _buff = FREAD(_file); _buff != -1; _buff = FREAD(_file)
		{        
            regex[_i] = _buff
            _i++        
        }    
    }											
	--
	"\![execute,http-get,%(weatherurl),--async=OnWeatherVars,--file=weather2.html,--timeout=200]"
	--
	FCLOSE(_file)
	--
}

OnGetSomeWeather
{
	if reference0 == "manual"
	{
		manual_check = 1
	}
	--
	"\![execute,http-get,%(weatherurl),--async=OnWeatherVars,--file=weather2.html,--timeout=200]\b2  "
}

OnWeatherVars
{
	_file2 = "var\\weather2.html"
	_buff2 = ""

	_Lat = regex[0]
	_Long = regex[0]
	_hi = regex[1]
	_low = regex[2]
	_curtemp = regex[3] //should always be F, but just in case
	_feelslike = regex[4]
	_windspeed = regex[5]
	_condition = regex[6]
	_humidity = regex[7]
	_dawn = regex[8]
	_dusk = regex[8]
	
	FCHARSET(1)
	
	curlat = ("Unk","Unk")
	curlong = ("Unk","Unk")
	hightemp = ("Unk")
	lowtemp = ("Unk")
	realtemp = ("Unk","Unk")
	feeltemp = "Unk"
	windthing = "Unk"
	weatheris = "Unk"
	toomoist = "Unk"
	dawntime = "Unk"
	dusktime = "Unk"
	dawnsec = "Unk"
	dusksec = "Unk"
	
	w_array = (curlat,curlong,hightemp,lowtemp,realtemp,feeltemp,windthing,weatheris,toomoist,dawntime,dusktime)
	LOGGING("%curlat,%curlong,%hightemp,%lowtemp,%realtemp,%feeltemp,%windthing,%weatheris,%toomoist,%dawntime,%dusktime")
	LOGGING("OnWeatherVars achieved==============")
	
	
	if FOPEN(_file2,'r')
	{
	    for _buff2 = FREAD(_file2); _buff2 != -1; _buff2 = FREAD(_file2)
		{
			//latitude
            if RE_SEARCH (_buff2, _Lat); {curlat[0] = RE_GETSTR[1]; curlat[1] = RE_GETSTR[2]}
			
			//longitude
			if RE_SEARCH (_buff2, _Long); {curlong[0] = RE_GETSTR[3]; curlong[1] = RE_GETSTR[4]}
			//highs
			if RE_SEARCH (_buff2, _hi); {hightemp = RE_GETSTR[1]}

			//lows
			if RE_SEARCH (_buff2, _low); {lowtemp = RE_GETSTR[1]}
			
			//temperature
			if RE_SEARCH (_buff2, _curtemp); {realtemp[0] = RE_GETSTR[1]; realtemp[1] = RE_GETSTR[2]}
			
			//feels like
			if RE_SEARCH (_buff2, _feelslike); {feeltemp = RE_GETSTR[1]}
			
			//windspeed
			if RE_SEARCH (_buff2, _windspeed); {windthing = RE_GETSTR[1]}
			
			//condition
			if RE_SEARCH (_buff2, _condition); {weatheris = RE_GETSTR[1]}
			
			//humidity
			if RE_SEARCH (_buff2, _humidity); {toomoist = RE_GETSTR[1]}
			
			//dawntime
			if RE_SEARCH (_buff2, _dawn); {dawntime = RE_GETSTR[1]}
			//dusktime
			if RE_SEARCH (_buff2, _dusk); {dusktime = RE_GETSTR[2]}

		}
	--
	timechecked = (hour,nowmin,nowmonth,GETTIME()[2],GETTIME()[0])
	LOGGING("%curlat,%curlong,%hightemp,%lowtemp,%realtemp,%feeltemp,%windthing,%weatheris,%toomoist,%dawntime,%dusktime")
	weatheris = REPLACE(weatheris, " in", " soon")
	--
	if (remindhr == "On" && minute == 0) || (manual_check == 1)
	{
		OnWeatherMe
	}
	--
	dawnsec = ((dawntime[0,':']*60*60)+(dawntime[1,':']*60))
	dusksec = (((TOINT(dusktime[0,':'])+12)*60*60)+(dusktime[1,':']*60))
	}
	--
	FCLOSE(_file2)
	--
}

OnWeatherMe
{										   
	if (realtemp[0] == "") || (feeltemp == "") || (windthing == "") || (weatheris == "") || (toomoist == "") || (dawntime == "") || (dusktime == "")
	{
		OnGetSomeWeather
	}
	elseif (realtemp[0] == "Unk") && (feeltemp == "Unk") && (windthing == "Unk") && (weatheris == "Unk") && (toomoist == "Unk") && (dawntime == "Unk") && (dusktime == "Unk")
	{
		_which = 'Try in ten minutes'
		if nowmin >= 50
		{
			_which = 'Wait for the hour'
		}
		--
		"%(a0)There is no weather today.\n\n/
		\q[Try again?,OnGetSomeWeather]   \q[%(_which),pausetenmins]\n/
		\q[Try another site?,OnLoc]   \q[No weather,noweather]\e"
	}
	else
	{
		"%(s0)\b2%(tmo)\t\_q\f[align,right]\f[height,80%]Retrieved %(timechecked[0]):%(timechecked[1]), %(timechecked[2]) %(timechecked[3]), %(timechecked[4])\f[height,default]\n\f[align,left]\_q\w5/
		Currently "
		--
		if realtemp[0] != "Unk"
		{
			"%realtemp[0]°%realtemp[1]"
			--
			if feeltemp != "Unk"
			{
				", "
			}
		}
		--
		if feeltemp != "Unk"
		{
			"feels like %feeltemp°%realtemp[1]"
		}
		--
		if weatheris != "Unk"
		{
			":\w5 %weatheris"
		}
		--
		"\n"
		--
		if (ISINTSTR(hightemp) == 1)
		{
			highesttemp = TOINT(hightemp)
		}
		--
		if GETTYPE(highesttemp) != 1
		{
			if lowtemp != "Unk"
			{
				"Low: %lowtemp°%realtemp[1]"
			}
		}
		else
		{
			"High: %highesttemp°%realtemp[1]"
			--
			if lowtemp != "Unk"
			{
				"\_l[6.5em]Low: %lowtemp°%realtemp[1]"
			}
		}
		--
		if windthing != "Unk"
		{
			"\nWindspeed is %windthing mph"
		}
		--
		if toomoist != "Unk"
		{
			"\n%toomoist% humidity"
		}
		--
		"\n"
		--
		if dawntime != "Unk"
		{
			"\n[half]Sunrise: %dawntime AM"
		}
		--
		if dusktime != "Unk"
		{
			"\nSunset: %dusktime PM"
		}
		--
		manual_check = 0
		"\n[25]"
	}
	--
	if weirdweather == "On"
	{
		Select.weather_less
	}
}

Select.noweather
{
	optweather = "Off"
	manual_check = 0
	"\![raise,Cancel]"
}


Select.pausetenmins
{
	if nowmin >= 55
	{
		"\![raise,Cancel]"
	}
	else
	{
		pauseweather=(1,0)
	}
}

Select.weather_less
{
	if weirdweather == "On"
	{
		"\C\n[half]\f[align,center]\_q-------\_q\w5\n\f[align,left]"
	}
	else
	{
		"\b"
	}
	--
	"Today's forecast is... \w5\w5\n%(weatherless)."
}

//time evaluations

//currentime since midnight
//onminute change to check dawn and dusk
//half hour before + after each



//Calendar conversions!

OnFunConvert
{
	LOGGING("%(reference)")

	_month = TOINT(bdate[0])
	_day = bdate[1]
	_year = TOINT(bdate[2])
	if ISINTSTR(bdate[2]) != 1
	{
		_year = 1971
	}
	if forfundate != ""
	{
		_month = forfundate[1]
		_day = forfundate[2]
		_year = forfundate[0]		
	}
	--
	"\![open,dateinput,OnConvertCal,-1,%(_year),%(_month),%(_day),--reference=%(reference)]"
}

OnConvertCal
{
	"\b2Converting Gregorian to %(reference2)...\n\n"
	--
	_nope = FDEL("var\\funnow.html")
	_nope2 = FDEL("var\\funnext.html")
	--
	forfundate = reference0
	funcalendarfun = IARRAY
	if reference2 == "Hebrew"
	{
		OnHebrewCal(forfundate)
		LOGGING("%funcalendarfun is the calendar fun immediately after the calendar get")
		
	}
	elseif reference2 == "Jacobin"
	{
		
		_return = OnJacobinMonths(forfundate[0],forfundate[1],forfundate[2])
		
		"%jour(_return)"
		--
		"\n\_q\![*]\q[Do another?,OnFunConvert,%(reference2)]       \![*]\q[I'm done,OnMenuRunPre]"
	}
	elseif reference2 == "moon phase"
	{
		_return = OnMoonphase(forfundate[0],forfundate[1],forfundate[2])
		_return[0]
	}
}

lookity
{
	_len = ARRAYSIZE(funcalendarfun)
		
	_a6 = ASEARCH('funnow.html',funcalendarfun)
	_p6 = ASEARCH('funnext.html',funcalendarfun)
		
	_y = funcalendarfun[_a6+1]
	_m = funcalendarfun[_a6+2]
	_d = funcalendarfun[_a6+3]
		
	_y6 = funcalendarfun[_p6+1]
	_m6 = funcalendarfun[_p6+2]
	_d6 = funcalendarfun[_p6+3]
	
	--
	
	"\CBefore sunset: %_m %_d, %_y\n/
	After sunset: %_m6 %_d6, %_y6\n"
	--
	"\n\_q\![*]\q[Do another?,OnFunConvert,Hebrew]       \![*]\q[I'm done,OnMenuRunPre]"
}

// unit conversions



Select.tempconvmenu
{
	if ISVAR('starttemp') != 1; starttemp = IARRAY
	if ISVAR('tempfigs') != 1; tempfigs = 0
	
	_zero = 0
	_temparray = ("Celsius","Kelvin","Fahrenheit")
	
	_s0 = ""
	_n0 = ""
	_s1 = ""
	_n1 = ""
	
	_degree = (" "," ")
	if starttemp[0] != ""; {_zero = starttemp[0]}

	if tempconversionarray[0] != "K"; {_degree[0] = "°"}
	if tempconversionarray[1] != "K"; {_degree[1] = "°"}
	
	_len = ARRAYSIZE(_temparray)
	_output = ""

	"%(s0)\b2\_q%(tmo)Temperature: \f[bold,1]\q[%(ChopZero(_zero)),temptoconvert]\f[bold,0]%(_degree[0])%(tempconversionarray[0])     \f[bold,1]%(ChopZero(starttemp[1]))\f[bold,0]%(_degree[1])%(tempconversionarray[1])\n\n[half]\_l[3em]\f[bold,1]From:\_l[10em]To:\f[bold,0]\n"
	--
	for _var = 0; _var < _len; _var++
	{
		_unit = _temparray[_var]
		_init = SUBSTR(_unit,0,1)
		//LOGGING("===============================")
		//LOGGING("the unit is %(_unit), the initial value is %(_init) and the array is %(tempconversionarray)")
		//LOGGING("===============================")
		if tempconversionarray[0] == _init
		{
			_s0 = "\_l[0.5em](x) \f[underline,1]"
			_n0 = "\f[underline,0]"
		}
		else
		{
			_s0 = "\_l[2em]"
			_n0 = ""
		}
		--
		if tempconversionarray[1] == _init
		{
			_s1 = "\_l[8.5em](x) \f[underline,1]"
			_n1 = "\f[underline,0]"
		}
		else
		{
			_s1 = "\_l[10em]"
			_n1 = ""
		}
		--
		_output += "%(_s0)\q[%(_unit),OnWhichTemp,0,%(_init)]%(_n0)%(_s1)\q[%(_unit),OnWhichTemp,1,%(_init)]%(_n1)\n"
		--
		
	}
	--
	_output
	--
	"\n\![*]\q[Convert Another,unitselect]     \![*]\q[Cancel,Cancel]"
}

OnUnitToggle
{
	_cat = reference0
	
	_res = ASEARCH(_cat,unitarray)
	
	if _res == -1
	{
		unitarray ,= _cat
	}
	else
	{
		unitarray[_res] = IARRAY
	}
	--
	Select.tempconvmenu
}

OnWhichTemp
{
	_ft = TOINT(reference0)
	_which = SUBSTR(reference1,0,1)
	LOGGING("%(_ft) and %(_which)")
	
	tempconversionarray[_ft] = _which
	--
	Select.convtemp
}

Select.temptoconvert
{
	"\![open,inputbox,OnStartTemp]"
	--
	Select.tempconvmenu
}

OnStartTemp
{
	LOGGING("arrived at onstarttemp==================")
	if GETTYPE(reference0) != 1 && GETTYPE(reference0) != 2 || ((GETTYPE(reference0)) == 3 && (ISREALSTR(reference0) != 1))
	{
		LOGGING("is it arrived?====================")
		LOGGING("type is %GETTYPE(reference0) and realable is %ISREALSTR(reference0)====================")
		Select.temptoconvert
	}
	else
	{
		if GETTYPE(reference0) == 3 || GETTYPE(reference0) == 2
		{
			//take string, suss out sig figs
			//no, i think there's a positional function in yaya
			_avar = reference0
			
			if GETTYPE(reference0) == 2
			//if real, convert to string
			{
				TOSTR(_avar)
			}
			if STRSTR(_avar,'.',0) != -1
			//if there is a decimal within
			{
				_len = STRLEN(_avar)
				_pos = STRSTR(_avar,'.',0)
				//now we have the position of the decimal
				//find how many slots from the end it is?
				//simple subtraction of the total length minus _pos
				tempfigs = _len-_pos
			}
			else
			{
				tempfigs = 0
			}
		}
		else
		//if int
		{
			tempfigs = 0
			//zero sig figs
		}
		
		LOGGING("can i set the variable?===================")
		starttemp[0] = TOREAL(reference0)
		Select.convtemp
	}
}

Select.convtemp
{
	LOGGING("going to convert the temp now")
	_from = tempconversionarray[0]
	_to = tempconversionarray[1]
	_init = starttemp[0]
	LOGGING("we start from %(_from) and go to %(_to) and the initial temperature is %(_init)")
	if _from == _to
	{
		LOGGING("the start and end temps are the same")
		starttemp[1] = starttemp[0]
	}
	elseif _from == "F"
	{
		LOGGING("we are converting from fahrenheit")
		_conc = ((_init-32)*5.0/9)
		//check if initial value had a decimal/significant figures?
		if _to == "K"
		{
			LOGGING("we are going to kelvin")
			_conc += 273.15
		}
		starttemp[1] = _conc
	}
	else
	{
		_conc = _init
		LOGGING("we are starting from either kelvin or celsius")
		if _from == "K"
		{
			LOGGING("we are starting from kelvin")
			_conc = _init - 273.15
		}
		elseif _to == "K"
		{
			LOGGING("we are going to kelvin (from celsius")
			_conc = _init + 273.15
		}
		
		if _to == "F"
		{
			LOGGING("we are going to fahrenheit")
			_conc = ((_conc*9.0/5)+32)
		}
		starttemp[1] = _conc
	}
	LOGGING("%(starttemp) is the array")
	--
	Select.tempconvmenu
	
}

Select.distconvmenu
{
	if ISVAR('startdist') != 1; startdist = IARRAY
	if ISVAR('distfigs') != 1; distfigs = 0
	
	_zero = 0
	_distarray = ("Feet","Kilometers","Meters","Miles")
	_distabrv = ("ft","km","m","mi")
	
	_s0 = ""
	_n0 = ""
	_s1 = ""
	_n1 = ""
	
	if startdist[0] != ""; {_zero = startdist[0]}
	
	_len = ARRAYSIZE(_distarray)
	_output = ""
	
	"%(s0)\b2\_q%(tmo)Distance: \f[bold,1]\q[%(ChopZero(_zero)),disttoconvert]\f[bold,0] %(distconversionarray[0])     \f[bold,1]%(ChopZero(startdist[1]))\f[bold,0] %(distconversionarray[1])\n\n[half]\_l[3em]\f[bold,1]From:\_l[10em]To:\f[bold,0]\n"
	--
	for _var = 0; _var < _len; _var++
	{
		_unit = _distarray[_var]
		_init = _distabrv[_var]
		_metric = SUBSTR(_unit,-6,5)
		//LOGGING("===============================")
		//LOGGING("the unit is %(_unit), the initial value is %(_init) and the array is %(distconversionarray)")
		//LOGGING("===============================")
		if distconversionarray[0] == _init
		{
			_s0 = "\_l[0.5em](x) \f[underline,1]"
			_n0 = "\f[underline,0]"
		}
		else
		{
			_s0 = "\_l[2em]"
			_n0 = ""
		}
		--
		if distconversionarray[1] == _init
		{
			_s1 = "\_l[8.5em](x) \f[underline,1]"
			_n1 = "\f[underline,0]"
		}
		else
		{
			_s1 = "\_l[10em]"
			_n1 = ""
		}
		--
		_output += "%(_s0)\q[%(_unit),OnWhichDist,0,%(_init),%(_metric)]%(_n0)%(_s1)\q[%(_unit),OnWhichDist,1,%(_init),%(_metric)]%(_n1)\n"
		--
		
	}
	--
	_output
	--
	"\n\![*]\q[Convert Another,unitselect]     \![*]\q[Cancel,Cancel]"
}


OnWhichDist
{
	_ft = TOINT(reference0)
	_which = reference1
	_metric = reference2
	LOGGING("%(_ft) and %(_which)")
	
	distconversionarray[_ft] = _which
	distconversionarray[_ft+2] = _metric
	--
	Select.convdist
}

Select.disttoconvert
{
	"\![open,inputbox,OnStartDist]"
	--
	Select.distconvmenu
}

OnStartDist
{
	LOGGING("arrived at onstartdist==================")
	if GETTYPE(reference0) != 1 && GETTYPE(reference0) != 2 || ((GETTYPE(reference0)) == 3 && (ISREALSTR(reference0) != 1))
	{
		LOGGING("is it arrived?====================")
		LOGGING("type is %GETTYPE(reference0) and realable is %ISREALSTR(reference0)====================")
		Select.disttoconvert
	}
	else
	{
		if GETTYPE(reference0) == 3 || GETTYPE(reference0) == 2
		{
			//take string, suss out sig figs
			//no, i think there's a positional function in yaya
			_avar = reference0
			
			if GETTYPE(reference0) == 2
			//if real, convert to string
			{
				TOSTR(_avar)
			}
			if STRSTR(_avar,'.',0) != -1
			//if there is a decimal within
			{
				_len = STRLEN(_avar)
				_pos = STRSTR(_avar,'.',0)
				//now we have the position of the decimal
				//find how many slots from the end it is?
				//simple subtraction of the total length minus _pos
				distfigs = _len-_pos
			}
			else
			{
				distfigs = 0
			}
		}
		else
		//if int
		{
			distfigs = 0
			//zero sig figs
		}
		
		LOGGING("can i set the variable?===================")
		startdist[0] = TOREAL(reference0)
		Select.convdist
	}
}

Select.convdist
{
	_from = distconversionarray[0]
	_to = distconversionarray[1]
	_fmet = TOLOWER(distconversionarray[2])
	_tmet = TOLOWER(distconversionarray[3])
	
	_init = startdist[0]
	_conc = _init
	
	if _from == _to
	{
		startdist[1] = startdist[0]
	}
	elseif _fmet == _tmet
	//metric to metric
	{
		if _from == "m"
		{
			if _to == "km"
			{
				_conc = _init/1000.0
			}
		}
		elseif _from == "km"
		{
			if _to == "m"
			{
				_conc = _init*1000.0
				
			}
		}
		startdist[1] = _conc
	}
	elseif _fmet == "meter"
	{
		LOGGING("starting from metric")
		//metric to imperial
		if _from == "km"
		{
			//km to m
			_conc = _init*1000
		}
		
		//meters to feet, for all
		_conc = _conc/0.3048
		
		if _to == "mi"
		{
			//convert feet to miles
			_conc = _conc/5280.0
		}
		
		startdist[1] = _conc
	}
	elseif _from == "ft"
	{
		LOGGING("starting from feet")
		LOGGING("to %(_tmet)")
		if _tmet == "meter"
		{
			LOGGING("feet to metric")
			//from feet to meters
			_conc = 0.3048*_init
			
			if _to == "km"
			{
				//if to kilometers, actually
				_conc /= 1000.0
			}
		}
		elseif _to == "mi"
		{
			//from feet to miles
			_conc = _init/5280.0
		}
		startdist[1] = _conc
	}
	elseif _from == "mi"
	{
		LOGGING("starting from miles")
		//miles to feet
		_conc = _init*5280
		LOGGING("%(_conc) after miles to feet")
		if _tmet == "meter"
		{
			LOGGING("feet to metric")
			//meters to feet
			_conc = _conc*0.3048
			LOGGING("%(_conc) after feet to metric")
			
			if _to == "km"
			{
				//meters to km
				_conc = _conc/1000.0
			}
		}
		startdist[1] = _conc
	}
	--
	Select.distconvmenu
}


Select.massconvmenu
{
	if ISVAR('startmass') != 1; startmass = IARRAY
	if ISVAR('massfigs') != 1; massfigs = 0
	
	_zero = 0
	_massarray = ("Grams","Kilograms","Ounces","Pounds")
	_massabrv = ("g","kg","oz","lb")
	
	_s0 = ""
	_n0 = ""
	_s1 = ""
	_n1 = ""
	
	if startmass[0] != ""; {_zero = startmass[0]}
	
	_len = ARRAYSIZE(_massarray)
	_output = ""
	
	"%(s0)\b2\_q%(tmo)Mass/Weight: \f[bold,1]\q[%(ChopZero(_zero)),masstoconvert]\f[bold,0] %(massconversionarray[0])     \f[bold,1]%(ChopZero(startmass[1])) \f[bold,0]%(massconversionarray[1])\n\n[half]\_l[3em]\f[bold,1]From:\_l[10em]To:\f[bold,0]\n"
	--
	for _var = 0; _var < _len; _var++
	{
		_unit = _massarray[_var]
		_init = _massabrv[_var]
		_metric = SUBSTR(_unit,-5,4)
		//LOGGING("===============================")
		//LOGGING("the unit is %(_unit), the initial value is %(_init) and the array is %(distconversionarray)")
		//LOGGING("===============================")
		if massconversionarray[0] == _init
		{
			_s0 = "\_l[0.5em](x) \f[underline,1]"
			_n0 = "\f[underline,0]"
		}
		else
		{
			_s0 = "\_l[2em]"
			_n0 = ""
		}
		--
		if massconversionarray[1] == _init
		{
			_s1 = "\_l[8.5em](x) \f[underline,1]"
			_n1 = "\f[underline,0]"
		}
		else
		{
			_s1 = "\_l[10em]"
			_n1 = ""
		}
		--
		_output += "%(_s0)\q[%(_unit),OnWhichMass,0,%(_init),%(_metric)]%(_n0)%(_s1)\q[%(_unit),OnWhichMass,1,%(_init),%(_metric)]%(_n1)\n"
		--
		
	}
	--
	_output
	--
	"\n\![*]\q[Convert Another,unitselect]     \![*]\q[Cancel,Cancel]"
}


OnWhichMass
{
	_ft = TOINT(reference0)
	_which = reference1
	_metric = reference2
	LOGGING("%(_ft) and %(_which)")
	
	massconversionarray[_ft] = _which
	massconversionarray[_ft+2] = _metric
	--
	Select.convmass
}

Select.masstoconvert
{
	"\![open,inputbox,OnStartMass]"
	--
	Select.massconvmenu
}

OnStartMass
{
	LOGGING("arrived at onstartmass==================")
	if GETTYPE(reference0) != 1 && GETTYPE(reference0) != 2 || ((GETTYPE(reference0)) == 3 && (ISREALSTR(reference0) != 1))
	{
		LOGGING("is it arrived?====================")
		LOGGING("type is %GETTYPE(reference0) and realable is %ISREALSTR(reference0)====================")
		Select.masstoconvert
	}
	else
	{
		if GETTYPE(reference0) == 3 || GETTYPE(reference0) == 2
		{
			//take string, suss out sig figs
			//no, i think there's a positional function in yaya
			_avar = reference0
			
			if GETTYPE(reference0) == 2
			//if real, convert to string
			{
				TOSTR(_avar)
			}
			if STRSTR(_avar,'.',0) != -1
			//if there is a decimal within
			{
				_len = STRLEN(_avar)
				_pos = STRSTR(_avar,'.',0)
				//now we have the position of the decimal
				//find how many slots from the end it is?
				//simple subtraction of the total length minus _pos
				massfigs = _len-_pos
			}
			else
			{
				massfigs = 0
			}
		}
		else
		//if int
		{
			massfigs = 0
			//zero sig figs
		}
		
		LOGGING("can i set the variable?===================")
		startmass[0] = TOREAL(reference0)
		Select.convmass
	}
}

Select.convmass
{
	_from = massconversionarray[0]
	_to = massconversionarray[1]
	_fmet = TOLOWER(massconversionarray[2])
	_tmet = TOLOWER(massconversionarray[3])
	
	_init = startmass[0]
	_conc = _init
	
	if _from == _to
	{
		startmass[1] = startmass[0]
	}
	elseif _fmet == _tmet
	//metric to metric
	{
		if _from == "g"
		{
			if _to == "kg"
			{
				_conc = _init/1000.0
			}
		}
		elseif _from == "kg"
		{
			if _to == "g"
			{
				_conc = _init*1000.0
				
			}
		}
		startmass[1] = _conc
	}
	elseif _fmet == "gram"
	{
		//metric to imperial

		//km to gram
		if _from == "kg"
		{
			_conc = _init*1000
		}
		
		//gram to oz
		_conc = _conc/28.34952
		
		if _to == "lb"
		{
			_conc = _conc/16.0
		}
		
		startmass[1] = _conc
	}
	elseif _from == "oz"
	{
		if _tmet == "gram"
		{
			//oz to gram
			_conc = _init*28.34952
			
			if _to == "kg"
			{
				_conc = _conc/1000.0
			}
		}
		elseif _to == "lb"
		{
			_conc = _init/16.0
		}
		startmass[1] = _conc
	}
	elseif _from == "lb"
	{
		//lb to oz
		_conc = _init*16
		
		if _tmet == "gram"
		{
			//oz to gram
			_conc = _conc*28.34952
			if _to == "kg"
			{
				//gram to kg
				_conc = _conc/1000.0
			}
		}
		startmass[1] = _conc
	}
	--
	Select.massconvmenu
}

OnExecuteHTTPComplete
{
	"\b2 the link worked\n\n%(reference)"
}

OnExecuteHTTPFailure 
{
	"\b2 the link failed\n\n %(reference)"
}