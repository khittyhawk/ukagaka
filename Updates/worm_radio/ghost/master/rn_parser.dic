
//::::######\:::##\:::##\::::#####\:::##\:::##\::::#####\:::#######\::::######\:::::::::###\::::::::
//:::##  __##\::###\::## |::##  _##\::## |::## |::##  _##\::##  __##\::##  __##\:::::::## ##\:::::::
//:::## /::## |:####\:## |:##  /:\__|:## |::## |:##  /:## |:## |::## |:## /::\__|::::::\###\ |::::::
//:::######## |:## ##\## |:## |:::::::######## |:## |::## |:#######  |:\######\::::::::##\##\##\::::
//:::##  __## |:## |#### |:## |:::::::##  __## |:## |::## |:##  __## <::\____##\:::::::## \## __|:::
//:::## |::## |:## |:### |:## |::##\::## |::## |:## |::## |:## |::## |:##\:::## |::::::## |\##\:::::
//:::## |::## |:## |::## |:\######  |:## |::## |:\######  |:## |::## |:\######  |:::::::#### ##\::::
//:::\__|::\__|:\__|::\__|::\______/::\__|::\__|::\______/::\__|::\__|::\______/::::::::\____\__|:::

//::::######\:::::::::::########\::::::::::::::::::::::::::::::::::::::::::##\::::::::::::::##\:::::::::::::::::::::
//:::##  __##\::::::::::\__##  __|:::::::::::::::::::::::::::::::::::::::::## |:::::::::::::## |::::::::::::::::::::
//:::## /::## |:#######\:::## |::######\:::######\:::#######\::::#######\::## |::######\::######\:::::######\:::::::
//:::## |::## |:##  __##\::## |:##  __##\::\____##\::##  __##\::##  _____|:## |::\____##\:\_##  _|:::##  __##\::::::
//:::## |::## |:## |::## |:## |:## |::\__|:####### |:## |::## |:\######\:::## |::####### |::## |:::::######## |:::::
//:::## |::## |:## |::## |:## |:## |::::::##  __## |:## |::## |::\____##\::## |:##  __## |::## |##\::##   ____|:::::
//::::######  |:## |::## |:## |:## |::::::\####### |:## |::## |:#######  |:## |:\####### |::\####  |:\#######\::::::
//::::\______/::\__|::\__|:\__|:\__|:::::::\_______|:\__|::\__|:\_______/::\__|::\_______|:::\____/:::\_______|:::::



//anchor words - automatically links certain words to $location
//all text goes through OnTranslate before being displayed in the balloon (it's how anchor can function)
/*
list of shortcuts:
-%tmo prevents balloon timeout (until the balloon is clicked)
-%(Capitalize(envelope)) makes the first letter a capitalized
-


*/



OnTranslate
{
	Select.dirtybit
	_talk = reference0
	//---Anchors---
	_len = ARRAYSIZE(goodgollygosh)
	--
	if washurmouth == "Fuck yes"
	{
		_cens = ""
		if SHIORI3FW.ShellName == "Ship"
		{
			_cens = ""
		}
		elseif SHIORI3FW.ShellName == "Radio"
		{
			_cens = "0"
		}
		//do i have to cycle through goodgollygosh here?
		for _var = 0; _var < _len; _var++
		{
			_dirty = STRSTR(TOLOWER(_talk),goodgollygosh[_var],0)
			if _dirty != -1
			{
				_talk = ERASE(_talk,_dirty,STRLEN(goodgollygosh[_var]))
				_talk = INSERT(_talk,_dirty,"\_b[censored%(_cens).png,inline,opaque]")
				_talk = REPLACE(_talk, goodgollygosh[_var], "\_b[censored%(_cens).png,inline,opaque]")
			}
			else
			{
				_talk = REPLACE(_talk, goodgollygosh[_var], "\_b[censored%(_cens).png,inline,opaque]")
			}
		}
	}
	--
	_talk = REPLACE(_talk, " reload", " \_a[OnRefresh]reload\_a")
	_talk = REPLACE(_talk, "online_mode", "\_a[plusline]Online Mode\_a")
	
	//---Important other stuff, written by Ponapalt---
	if reference1 == "" && reference2 == ""
	{ //send input box : no event (ref2) , no special flag (ref1)
		EVAL('"' + REPLACE(_talk,'"','" + CHR(0x22) + "') + '"')
	}
    else
	{ //event result from ghost
		TOSTR(_talk)
	}
}



OnAnchorSelect
{
	LOGGING("yoo-hoo~!")
	if "http://" _in_ reference0 || "https://" _in_ reference0 //checking to see if the link is a web address
	{
		//"\q[reference0,OnUrlOpen,reference0]"
		"\C\j[%(reference0)]"
	}
	else
	{
		case reference0
		{
			when "plusline"
			{
				"\![enter,online mode]"
			}
		}
	}
}

//no timeout
tmo
{
	"\![set,balloontimeout,-1]"
}

a0
{
	if SHIORI3FW.IsVisible[1] == 1
	{
		//if the kero is here
		"%(s0)"
		"%(k0)"
	}
	else
	{
		"%(s0)"
	}
}

a1
{
	if SHIORI3FW.IsVisible[1] == 1
	{
		//if the kero is here
		"%(k0)"
	}
	else
	{
		"%(s0)"
	}
}

//boat speed
s0
{
	if SHIORI3FW.ShellName == "Ship"
	{	

		if boatspeed == 1
		{
			"\0\s[1]"
		}
		elseif boatspeed == 2
		{
			"\0\s[2]"
		}
		elseif boatspeed == 3
		{
			"\0\s[3]"
		}
		elseif boatspeed == 4
		{
			"\0\s[4]"
		}
		elseif boatspeed == 5
		{
			"\0\s[5]"
		}
		elseif boatspeed == 8
		{
			"\0\s[8]"
		}
		elseif boatspeed == 9
		{
			"\0\s[9]"
		}
		else
		{
			"\0\s[0]"
		}
	}
	elseif SHIORI3FW.ShellName == "Radio"
	{

		if speakeris == 1
		{
			"\0\s[1]"
		}
		elseif speakeris == 2
		{
			"\0\s[2]"
		}
		elseif speakeris == 3
		{
			"\0\s[3]"
		}
		else
		{
			"\0\s[0]"
		}
	}
	
}

k0
{
	if SHIORI3FW.ShellName == "Radio"
	{
		_b = BalloonCheck
		if _b == 0 && stopfunction == 0
		{
			"\![raise,OneWingedAngle]"
		}
		else
		{
			quadrant = "none"
		}
		--
		case quadrant
		{
			when 1
			{
				"\1\s[11]"
			}
			when 2
			{
				"\1\s[12]"
			}
			when 3
			{
				"\1\s[13]"
			}
			when 4
			{
				"\1\s[14]"
			}
			when "n"
			{
				"\1\s[15]"
			}
			when "e"
			{
				"\1\s[16]"
			}
			when "s"
			{
				"\1\s[17]"
			}
			when "w"
			{
				"\1\s[18]"
			}
			/*
			when "c"
			{
				"\1\s[10]\i[30]"
			}
			*/
			others
			{
				"\1\s[10]"
			}
		}
	}
	else
	{
		"\1\s[10]"
	}
}

pi
{
	3.14159
}


//   ____ __  __ __ __  ____ __      ___   ____   ____  __ 
//  ||    ||\ || || || ||    ||     // \\  || \\ ||    (( \
//  ||==  ||\\|| \\ // ||==  ||    ((   )) ||_// ||==   \\ 
//  ||___ || \||  \V/  ||___ ||__|  \\_//  ||    ||___ \_))
//                                                         

billdoor
{
	"It crumbled"
	"It was dust"
	"I can see nothing of what has been engulfed"
	"What we all will be"
	"It breaks like chalk in my mouth"
	"Atoms\w8\w8%(lps6) Particulates\w8\w8%(lps6) Bits\w6 and bits\w6 and%(lps6)"
}

lps4
{
	".\w4.\w4.\w4"
}

lps6
{
	".\w6.\w6.\w6"
}

lps8
{
	".\w8.\w8.\w8"
}

spooptime
{
	"midnight"
	"daybreak"
	"twilight"
	"dusk"
	"the witching hour"
}

raveyard
{
	_bloonwait = "\![set,balloonwait,5]"
	if SHIORI3FW.IsGhostExist('Ship of Theseus') || anotherspoopy == 'Ship of Theseus'
	{
		"%(_bloonwait)...It is I."
	}
	if SHIORI3FW.IsGhostExist('Dreamtale Sans') || anotherspoopy == 'Dreamtale Sans'
	{
		"Undulating Bile"
	}
	if SHIORI3FW.IsGhostExist('Dr. W.D. Gaster') || anotherspoopy == 'Dr. W.D. Gaster'
	{
		"Gamefowl"
	}
	if SHIORI3FW.IsGhostExist('S the Skeleton') || anotherspoopy == 'S the Skeleton'
	{
		"Kintsugi"
	}
	if SHIORI3FW.IsGhostExist('Spite') || anotherspoopy == 'spitecat'
	{
		"it's just a cat"
	}
	
	if anotherspoopy != ""
	{
		_bloonwait = "\![set,balloonwait,3]"
	}
	"Something\w5\w5 %_bloonwait%(adj) and %(ger)"
	anotherspoopy = ""
}

adj
{
	"synovial"
	"cold"
	"sere"
	"red"
	"severe"
	"silvery"
	"portentous"
	"clammy"
	"inhuman"
	"bloody"
	"toothy"
	"digital"
	"filimentous"
	"ungodly"
	"fungal"
	"bilious"
	"feline"
	"uncanny"
	"vulpine"
	"bronchial"
	"boot-black"
	"chiral"
	"fluorescent"
	"brutal"
	"venerable"
	"Gallic"
	"filmy"
	"heretical"
	"gelid"
	"erinaceous"
	"decadent"
	"foolish"
	"lamplit"
	"numb"
	"restless"
	"obsequious"
	"featherless, bipedal"
	"formless"
	"finicky"
	"ephemeral"
	"erudite"
	"purulent"
	"inseperable"
	"current"
	"incomplete"
	

}

ger
{
	"white-crested"
	"clattering"
	"finned"
	"seeping"
	"teeming with spores"
	"swarming with them"
	"uncloaked"
	"undulating"
	"star-fixed"
	"depraved"
	"broken"
	"meandering"
	"with its innards ripped out"
	"tarred in downfeathers"
	"stripped of its parts"
	"\_q[REDACTED]\_q"
	"magnetized"
	"shrieking"
	"suffocating"
	"glimmering"
	"roiling"
	"salivating"
	"pulsating"
	"filled with bones"
	"shaking"
	"doused in unknown fluid"
	"pursued"
	"unsatisfied"
	"harvested from vines"
	"bristling with knives"
	"quivering"
	"blistering"
	"radiating"
	"formed of rock"
	"nattering"
	"brindled with mauve"
	"doomed"
	"tarnished"
	"smelling of artifice"
	"charred"
	"scolding like a jaybird"
	"strutting like a cockerel"
	"huddled"
	"unyielding"
	"undying"
	"eternally remaking itself"
	"smothered in crime"
}

usersfolder
{
	"start bar"
	"Documents folder"
	"Pictures folder"
	"Music folder"
	"Games folder"
}

filetype
{
	".txt"
	".dic"
	".png"
	".jpg"
	".jpeg"
	".mp3"
	".exe"
	".bat"
	".cfg"
	".wav"
	".pdf"
	".dat"
	".gif"
	".tiff"
	".dll"
	".pna"
	".ico"
	".dau"
	".zip"
	".nar"
	".html"
	".psd"
	".mp4"
	".ttf"
}


prons
{
	"he,him,his,is,s"
	"she,her,hers,is,s"
	"they,their,theirs,are,re"
}

//As the name implies, this checks if the balloon is currently open or not. This was written by Levidre!
//To use it I would do this, so you don't have to copy this whole chunk of code:
//_b = BalloonCheck
//if _b == 0 //_b will be 0 if the balloon is not open, or 1 if it is open
BalloonCheck
{
	if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "balloon" _in_ _currentstatus
        {
            1
        }
        else
        {
            0
        }
    }
}

//adapted by Zichqec from Levidre's ballooncheck
MenuCheck
{
    if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "choosing" _in_ _currentstatus; 1
        else; 0
    }
    else; 0
}


//This function exists to help make pools of dialogue have not-ridiculous probabilities! Please take a look at the pools in aitalk to get an idea how this works. If you need help with it, there's a full explanation on Zi's website: https://zichqec.github.io/s-the-skeleton/functions.html
Pool
{
    if TOINT(_argv[1]); EVAL("%(_argv[0])")
}


//If you write all your envelopes as lowercase, you can send them through this function whenever you need the first letter capitalized! It'd look something like this: "%(Capitalize(exampleenvelope))"
Capitalize
{
	_word = _argv[0] //Sets _word to the word the user sent
	_buffer = SUBSTR(_word,0,1) //Storing the first character in _buffer
	_word = ERASE(_word,0,1) //Erasing the first character from _word
	_word = INSERT(_word,0,TOUPPER(_buffer)) //Making the character in _buffer uppercase and inserting it back into _word
	_word //Returns the capitalized word
}



nowhour //hour12 displays the hour like a 12 hour clock, except for 12 which is displayed as 0
{
	if hour12 == 0; "12"
	else; "%(hour12)"
}

nowmin //Adding a 0 to the minute if it's under 10
{
	if minute < 10; "0%(minute)"
	else; "%(minute)"
}

runmin //Same as above but with the runtime minutes
{
	if runtime[1] < 10; "0%(runtime[1])"
	else; "%(runtime[1])"
}


ap //AM or PM - ampm is 0 during am, and 1 during pm
{
 	if ampm == 0; "AM"
 	else; "PM"
}

wd //Abbreviated week day
{
	if weekday == 0; "Sun"
	elseif weekday == 1; "Mon"
	elseif weekday == 2; "Tue"
	elseif weekday == 3; "Wed"
	elseif weekday == 4; "Thu"
	elseif weekday == 5; "Fri"
	else; "Sat"
}

nowday //Full week day
{
	_day = weekday
	if _argv[0] == "next"
	{
		_day++
		if _day > 6; _day = 0
	}
	if _argv[0] == "last"
	{
		_day--
		if _day < 0; _day = 6
	}
	
	if _day == 0; "Sunday"
	elseif _day == 1; "Monday"
	elseif _day == 2; "Tuesday"
	elseif _day == 3; "Wednesday"
	elseif _day == 4; "Thursday"
	elseif _day == 5; "Friday"
	else; "Saturday"
}

nowmonth //The current month name
{
	_month = month
	if _argv[0] == "next"
	{
		_month++
		if _month > 12; _month = 1
	}
	if _argv[0] == "last"
	{
		_month--
		if _month < 1; _month = 12
	}
	
	if _month == 1; "January"
	elseif _month == 2; "February"
	elseif _month == 3; "March"
	elseif _month == 4; "April"
	elseif _month == 5; "May"
	elseif _month == 6; "June"
	elseif _month == 7; "July"
	elseif _month == 8; "August"
	elseif _month == 9; "September"
	elseif _month == 10; "October"
	elseif _month == 11; "November"
	else; "December"
}

leapyear //Checks if this is a leap year
{
	if year % 4 != 0; 0
	elseif year % 100 != 0; 1
	elseif year % 400 != 0; 0
	else; 1
}


//i altered some times below to make it make more sense to my timekeeping
timeslot //From the GT template. Breaking down the day into a few distinct chunks so you dont have to add checks for every hour.
{
	if hour >= 5 && hour <= 9; "morning" //5-9am
	elseif hour >= 10 && hour <= 11; "latemorning" //10-11am
	elseif hour >= 12 && hour <= 14; "lunch" //12-2pm
	elseif hour >= 15 && hour <= 17; "afternoon" //3-5pm
	elseif hour >= 18 && hour <= 20; "evening" //6-8pm
	elseif hour >= 21 && hour <= 24; "latenight" //9pm-12am
	else; "earlymorning" //1-4am
}


Select.dirtybit
{
	goodgollygosh = ("bitch","fuck","prostitute","shit","damn")
}

Select.ssp_downloads
{
    dls = "shell","ghost","balloon","plugin","headline","supplement","ghost with balloon","shell with balloon","calendar skin","package","language"
	fails = "unlha32","extraction","invalid type","artificial","unsupported","password"
	ntw = "timeout","md5 miss","artificial","404 etc.","fileio","readonly","virusdetect","toomanyredirect","executing","param error"
	ntwyey = "none","changed"
	ntwtarg = "ghost","shell","balloon","plugin","headline"
}