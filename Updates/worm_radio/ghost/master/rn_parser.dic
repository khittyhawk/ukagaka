
//::::######\:::##\:::##\::::#####\:::##\:::##\::::#####\:::#######\::::######\:::::::::###\::::::::
//:::##  __##\::###\::## |::##  _##\::## |::## |::##  _##\::##  __##\::##  __##\:::::::## ##\:::::::
//:::## /::## |:####\:## |:##  /:\__|:## |::## |:##  /:## |:## |::## |:## /::\__|::::::\###\ |::::::
//:::######## |:## ##\## |:## |:::::::######## |:## |::## |:#######  |:\######\::::::::##\##\##\::::
//:::##  __## |:## |#### |:## |:::::::##  __## |:## |::## |:##  __## <::\____##\:::::::## \## __|:::
//:::## |::## |:## |:### |:## |::##\::## |::## |:## |::## |:## |::## |:##\:::## |::::::## |\##\:::::
//:::## |::## |:## |::## |:\######  |:## |::## |:\######  |:## |::## |:\######  |:::::::#### ##\::::
//:::\__|::\__|:\__|::\__|::\______/::\__|::\__|::\______/::\__|::\__|::\______/::::::::\____\__|:::

//::::######\:::::::::::########\::::::::::::::::::::::::::::::::::::::::::##\::::::::::::::##\:::::::::::::::::::::
//:::##  __##\::::::::::\__##  __|:::::::::::::::::::::::::::::::::::::::::## |:::::::::::::## |::::::::::::::::::::
//:::## /::## |:#######\:::## |::######\:::######\:::#######\::::#######\::## |::######\::######\:::::######\:::::::
//:::## |::## |:##  __##\::## |:##  __##\::\____##\::##  __##\::##  _____|:## |::\____##\:\_##  _|:::##  __##\::::::
//:::## |::## |:## |::## |:## |:## |::\__|:####### |:## |::## |:\######\:::## |::####### |::## |:::::######## |:::::
//:::## |::## |:## |::## |:## |:## |::::::##  __## |:## |::## |::\____##\::## |:##  __## |::## |##\::##   ____|:::::
//::::######  |:## |::## |:## |:## |::::::\####### |:## |::## |:#######  |:## |:\####### |::\####  |:\#######\::::::
//::::\______/::\__|::\__|:\__|:\__|:::::::\_______|:\__|::\__|:\_______/::\__|::\_______|:::\____/:::\_______|:::::



//anchor words - automatically links certain words to $location
//all text goes through OnTranslate before being displayed in the balloon (it's how anchor can function)
/*
list of shortcuts:
-%tmo prevents balloon timeout (until the balloon is clicked)
-%(Capitalize(envelope)) makes the first letter a capitalized
-%(noscroll) disables autoscrolling to the bottom


*/



OnTranslate
{
	Select.dirtybit
	_talk = reference0
	//---Anchors---
	_len = ARRAYSIZE(goodgollygosh)
	--
	if washurmouth == "Fuck yes"
	{
		_cens = ""

		if SHIORI3FW.BalloonName == "broadcast"
		{
			_cens = "0"
		}
		
		_talk = REPLACE(_talk,"Jehovah","J\_b[censored%(_cens).png,inline,opaque]h")
		//do i have to cycle through goodgollygosh here?
		for _var = 0; _var < _len; _var++
		{
			_dirty = STRSTR(TOLOWER(_talk),goodgollygosh[_var],0)
			if _dirty != -1
			{
				_talk = ERASE(_talk,_dirty,STRLEN(goodgollygosh[_var]))
				_talk = INSERT(_talk,_dirty,"\_b[censored%(_cens).png,inline,opaque]")
				_talk = REPLACE(_talk, goodgollygosh[_var], "\_b[censored%(_cens).png,inline,opaque]")
			}
			else
			{
				_talk = REPLACE(_talk, goodgollygosh[_var], "\_b[censored%(_cens).png,inline,opaque]")
			}
		}
	}
	--
	
	_thismoon = moonmoon[0]
	_talk = REPLACE(_talk, " reload", " \_a[OnRefresh]reload\_a")
	_talk = REPLACE(_talk, "online_mode", "\_a[plusline]Online Mode\_a")
	_talk = REPLACE(_talk, "a_moon","\_b[\Dev_Tools\moon\%(_thismoon).png,inline,--option=use_self_alpha]")
	
	_talk = REPLACE(_talk, "dial_g","\_b[\Dev_Tools\dials\green_dial.png,inline,--option=use_self_alpha]")
	_talk = REPLACE(_talk, "dial_b","\_b[\Dev_Tools\dials\blue_dial.png,inline,--option=use_self_alpha]")
	_talk = REPLACE(_talk, "dial_r","\_b[\Dev_Tools\dials\red_dial.png,inline,--option=use_self_alpha]")
	_talk = REPLACE(_talk, "dial_o","\_b[\Dev_Tools\dials\orange_dial.png,inline,--option=use_self_alpha]")
	
	
	_hnum = ""
	if hour >= 18
	{
		_hnum = hday6
	}
	else
	{
		_hnum = hday
	}
	
	_talk = REPLACE(_talk,"num_aleph","\_b[\Dev_Tools\Hnums\%(_hnum)w.png,inline]")
	_talk = REPLACE(_talk,"temp_veg","\_b[\Dev_Tools\Jnums\%(veg).png,inline,option=use_self_alpha]")
	--
	//check a random number of characters (between 6 and 10?). If no apostrophes, slashes, or parentheses, give it a small chance to be replaced with bzzt?
	
	//what about replacing \ with (whatever code can call the dragging surface)\?
	
	
	//---Important other stuff, written by Ponapalt---
	if reference1 == "" && reference2 == ""
	{ //send input box : no event (ref2) , no special flag (ref1)
		EVAL('"' + REPLACE(_talk,'"','" + CHR(0x22) + "') + '"')
	}
    else
	{ //event result from ghost
		TOSTR(_talk)
	}
}



OnAnchorSelect
{
	LOGGING("yoo-hoo~!")
	if "http://" _in_ reference0 || "https://" _in_ reference0 //checking to see if the link is a web address
	{
		//"\q[reference0,OnUrlOpen,reference0]"
		"\C\j[%(reference0)]"
	}
	else
	{
		case reference0
		{
			when "plusline"
			{
				"\![enter,online mode]"
			}
		}
	}
}


//useful shortcuts
//no timeout
tmo
{
	"\![set,balloontimeout,-1]"
}

noscroll
{
	"\![set,autoscroll,disable]"
}

i
{
	"\f[italic,1]"
}

i0
{
	"\f[italic,0]"
}

speed
{
	"\![set,balloonwait,%(_argv[0])]"
}

//ellipses of different wait times...
lps
{
	".\w%(_argv[0]).\w%(_argv[0]).\w%(_argv[0])"
}



//If you write all your envelopes as lowercase, you can send them through this function whenever you need the first letter capitalized! It'd look something like this: "%(Capitalize(exampleenvelope))"
Capitalize
{
	_word = _argv[0] //Sets _word to the word the user sent
	_buffer = SUBSTR(_word,0,1) //Storing the first character in _buffer
	_word = ERASE(_word,0,1) //Erasing the first character from _word
	_word = INSERT(_word,0,TOUPPER(_buffer)) //Making the character in _buffer uppercase and inserting it back into _word
	_word //Returns the capitalized word
}


Ord
{
	_number = TOSTR(_argv[0])
	_ones = (_number%10)
	_tens = (_number/10)
	
	if _tens == 1 || _ones > 3
	{
		_number = _number+'th'
	}
	elseif _ones == 3
	{
		_number = _number+'rd'
	}
	elseif _ones == 2
	{
		_number = _number+'nd'
	}
	elseif _ones == 1
	{
		_number = _number+'st'
	}
	else
	{
		_number = _number+'th'
	}
	
	_number
}



a0
{
	if SHIORI3FW.IsVisible[1] == 1
	{
		//if the kero is here
		"%(s0(_argv[0]))"
		"%(k0(_argv[0]))"
	}
	else
	{
		"%(s0(_argv[0]))"
	}
}

a1
{
	if SHIORI3FW.IsVisible[1] == 1
	{
		//if the kero is here
		"%(k0(_argv[0]))"
	}
	else
	{
		"%(s0(_argv[0]))"
	}
}

//boat speed
s0
{
	if SHIORI3FW.ShellName == "Ship"
	{	

		if boatspeed == 1
		{
			"\0\s[1]"
		}
		elseif boatspeed == 2
		{
			"\0\s[2]"
		}
		elseif boatspeed == 3
		{
			"\0\s[3]"
		}
		elseif boatspeed == 4
		{
			"\0\s[4]"
		}
		elseif boatspeed == 5
		{
			"\0\s[5]"
		}
		elseif boatspeed == 8
		{
			"\0\s[8]"
		}
		elseif boatspeed == 9
		{
			"\0\s[9]"
		}
		else
		{
			"\0\s[0]"
		}
	}
	elseif SHIORI3FW.ShellName == "Radio"
	{
		if spamon == 1
		{
			"\0\s[1]"
		}
		else
		{
			if _argv[0] == 25
			{
				"\0\s[25]"
			}
			else
			{
				"\0\s[0]"
			}
		}
	}
	
}

k0
{
	if SHIORI3FW.ShellName == "Radio"
	{
		/*
		_b = BalloonCheck
		if _b == 0 && stopfunction == 0
		{
			"\![raise,OneWingedAngle,wiggle]"
		}
		elseif _b == 0 && stopfollow == 0
		{
			LOGGING("i am going to follow")
			"\![raise,OneWingedAngle,follow]"
		}
		else
		{
			quadrant = "none"
			nearesttheta = "none"
		}
		*/
		if stopfunction == 2
		{
			break
		}
		elseif stopfunction == 0
		{
			case quadrant
			{
				when 1
				{
					"\1\s[11]"
				}
				when 2
				{
					"\1\s[12]"
				}
				when 3
				{
					"\1\s[13]"
				}
				when 4
				{
					"\1\s[14]"
				}
				when "n"
				{
					"\1\s[15]"
				}
				when "e"
				{
					"\1\s[16]"
				}
				when "s"
				{
					"\1\s[17]"
				}
				when "w"
				{
					"\1\s[18]"
				}
				/*
				when "c"
				{
					"\1\s[10]\i[30]"
				}
				*/
				others
				{
					"\1\s[10]"
				}
				--
				"\![raise,OneWingedAngle,wiggle]"
			}
		}
		elseif stopfollow == 0
		{
			if ISINTSTR(nearesttheta) != 1
			//if not an integer, it must be 'c'
			{
				//an alternativestart spiny thingy
			}
			else
			{
				"\1\s[10]\i[%(nearesttheta)]"
			}
		}
		else
		{
			if _argv[0] == 25
			{
				"\1\s[19]"
			}
			else
			{
				"\1\s[10]"
			}
		}
	}
	else
	{
		"\1\s[10]"
	}
}

//   ____ __  __ __ __  ____ __      ___   ____   ____  __ 
//  ||    ||\ || || || ||    ||     // \\  || \\ ||    (( \
//  ||==  ||\\|| \\ // ||==  ||    ((   )) ||_// ||==   \\ 
//  ||___ || \||  \V/  ||___ ||__|  \\_//  ||    ||___ \_))
//                                                         


adj
{
	"synovial"
	"cold"
	"sere"
	"red"
	"severe"
	"silvery"
	"portentous"
	"clammy"
	"inhuman"
	"bloody"
	"toothy"
	"digital"
	"filimentous"
	"ungodly"
	"fungal"
	"bilious"
	"feline"
	"uncanny"
	"vulpine"
	"bronchial"
	"boot-black"
	"chiral"
	"fluorescent"
	"brutal"
	"venerable"
	"Gallic"
	"filmy"
	"heretical"
	"bone-brittle"
	"gelid"
	"erinaceous"
	"glitchless"
	"decadent"
	"foolish"
	"lamplit"
	"numb"
	"restless"
	"obsequious"
	"featherless, bipedal"
	"formless"
	"finicky"
	"ephemeral"
	"erudite"
	"purulent"
	"inseperable"
	"current"
	"incomplete"
}

ger
{
	"white-crested"
	"clattering"
	"finned"
	"seeping"
	"fire-burnt"
	"teeming with spores"
	"swarming with them"
	"uncloaked"
	"undulating"
	"star-fixed"
	"depraved"
	"broken"
	"meandering"
	"with its innards ripped out"
	"tarred in downfeathers"
	"stripped of its parts"
	"\_q[REDACTED]\_q"
	"magnetized"
	"shrieking"
	"suffocating"
	"glimmering"
	"roiling"
	"salivating"
	"pulsating"
	"filled with bones"
	"shaking"
	"doused in unknown fluid"
	"pursued"
	"unsatisfied"
	"harvested from vines"
	"bristling with knives"
	"quivering"
	"blistering"
	"radiating"
	"formed of rock"
	"nattering"
	"brindled with mauve"
	"doomed"
	"tarnished"
	"smelling of artifice"
	"charred"
	"scolding like a jaybird"
	"strutting like a cockerel"
	"huddled"
	"unyielding"
	"undying"
	"eternally remaking itself"
	"smothered in crime"
}


billdoor
{
	"It crumbled"
	"It was dust"
	"I can see nothing of what has been engulfed"
	"What we all will be"
	"It breaks like chalk in my mouth"
	"Atoms\w8\w8%(lps(6)) Particulates\w8\w8%(lps(6)) Bits\w6 and bits\w6 and%(lps(6))"
}


spooptime
{
	"midnight"
	"daybreak"
	"twilight"
	"dusk"
	"the witching hour"
}

raveyard
{
	_bloonwait = "\![set,balloonwait,5]"
	if SHIORI3FW.IsGhostExist('Ship of Theseus') || anotherspoopy == 'Ship of Theseus' || SHIORI3FW.IsGhostExist('Radio Nowhere') || anotherspoopy == 'Radio Nowhere'
	{
		"%(_bloonwait)...It is I."
	}
	if SHIORI3FW.IsGhostExist('Dreamtale Sans') || anotherspoopy == 'Dreamtale Sans'
	{
		"Undulating bile"
		"The cuckoo's nestmate"
		"A wasp-laden caterpillar"
	}
	if SHIORI3FW.IsGhostExist('Hunter and Smoker') || anotherspoopy == 'Hunter and Smoker'
	{
		"Poppies\w3 as large as dinner plates"
	}
	if SHIORI3FW.IsGhostExist('Dr. W.D. Gaster') || anotherspoopy == 'Dr. W.D. Gaster'
	{
		"Gamefowl"
	}
	if SHIORI3FW.IsGhostExist('S the Skeleton') || anotherspoopy == 'S the Skeleton'
	{
		"Kintsugi"
	}
	if SHIORI3FW.IsGhostExist('Spite') || anotherspoopy == 'spitecat'
	{
		"it's just a cat"
	}
	if SHIORI3FW.IsGhostExist('Hydrate') || anotherspoopy == 'Hydrate'
	{
		"Tantalus in %(ANY('Hades,Tartarus'))"
	}
	
	if anotherspoopy != ""
	{
		_bloonwait = "\![set,balloonwait,3]"
	}
	"Something\w5\w5 %_bloonwait%(adj) and %(ger)"
	anotherspoopy = ""
}

prons
{
	"he,him,his,is,s"
	"she,her,hers,is,s"
	"they,their,theirs,are,re"
}

veg
{
	"acorn squash"
	"apple"
	"barrel"
	"beetroot"
	"buckwheat"
	"carrot"
	"carrot1"
	"cattle turnip"
	"cauliflower"
	"cedar tree"
	"celery"
	"chicory"
	"chili pepper"
	"cypress tree"
	"eggplant"
	"four o'clock flower"
	"goose"
	"gorse"
	"heather"
	"heliotrope"
	"hemp"
	"honey"
	"horseradish"
	"ivy"
	"juniper"
	"lambslettuce"
	"lambs lettuce"
	"medlar"
	"olive"
	"pear"
	"pickaxe"
	"pig"
	"potiron"
	"potiron1"
	"pumpkin"
	"pumpkin1"
	"rampion"
	"sauvin juniper"
	"sugar maple"
	"sunflower"
	"truffle"
	"water caltrop"
	"water caltrop1"
	"water caltrop2"
	"water caltrop3"
	"winter squash"
}

no_sun
{
	switch day
	{
		{
			//no day 0
		}
		{
			//day one
			"rains of frogs"
			"partly sunny, with a possible cold front screaming forth in the later afternoon"
			"early morning starshowers, becoming clear around noon"
			"partly cloudy, clearing up in the late afternoon, leading to clear visions of the lesser moons in the evening onward"
			"Severe Weather Alert! All citizens are expected to quarantine in response to reports of a new airborne pathogen that results in spontaneous uncontrolled singing and dancing"
			"encroaching red smoke that serves as a harbinger of the approach of the Eater of Names.\w5 Citizens are advised to obey curfew\w4, lest they risk the loss of the elements of their identity entwined with their name.\w5 Trans citizens who wish their birth name be forgotten are advised to stop by any municipal office and pick up a factsheet on the proper safety protocols for the manipulation of an entity of such caliber.\w5 Local LGBT groups also stress the importance of having a Spotter and a Medium during the procedure"
		}
		{
			//DAY 2
			"inverted gravity"
			"wind gusts leading to emotional chills and the occasional slight feeling of hauntological recognition"
			"hollow, brittle winds, echoing as though from caverns host to the bones of the unquiet dead"
			"visions of the moon, as seen through several lenses, cold enough to see your breath in"
			"a feverish intensity that will adhere itself to a lucky - or unlucky - host"
			"a particular\w8\w8\w8\w8\w8"
		}
		{
			//DAY 3
			"Howling sunsets with a small chance of intestinal inversion.\w6 Be sure to wear eye protection if you might find yourself beneath its gaze this evening."
			"ion storms off the horizon of the fourth moon"
			"gravitational neap tides"
			"shifting colors through the skeletons of dead leaves"
			"roiling whirlpools of methane at spots"
			"the roaring suction of the void"
		}
		{
			//DAY 4
			"Tonight begins the annual pilgrimage of the mad men. Shopkeepers are reminded to itemize the purchases made and the leaves they receive in payment, so they can be properly compensated in legal tender."
			"incandescent eigengrau"
			"cold winds from the south, later splitting into eggshell rivulets"
			"Allergen notice: the cats of Ulthar tread abroad tonight. Citizens sensitive to animal dander should be advised to stay inside and close to an air filter"
			"the elfin masters tennis open. Be alert for projectiles"
			"bouts of mock-Elizabethean lyricism"
		}
		{
			//DAY 5
			"suffocatingly heavy mist"
			"agitation in deciduous trees. Citizens are encouraged to ignore pareidolic whispers emanating from the shaking of these leaves."
			"lightning storms carrying the sound of hoofbeats"
			"the three-dimensional shadow of a four-dimensional entity is expected to hover over the landscape later this afternoon into this evening. Citizens are unlikely to feel any ill-effects in their current dimensions"
			"a downpour carrying marine fish"
			"intermittent hail glamour-borne as diamonds"
		}
		{
			//DAY 6
			"mist as light as downfeathers,\w8 gossamer threads that kiss one's skin with lemon-sweet nostalgia"
			"a glitch in damage register. Citizens who crouch while wielding a dual-bladed weapon will suffer no damage to their person. This is expected to be patched out before the night is over, so anyone who wishes to run with scissors should try sooner rather than later."
			"a chorale of bells from everywhere and nowhere as the sun reaches its zenith. Citizens are instructed to stop all activity in the half hour leading up to the event, as they will find themselves awestruck and in a trance as the peals echo away"
			"sunny, with possible eight-sided flurries"
			"the fog comes in on little cats' feet"
			"the decaying bodies of beetles, so numerous that the ground will crunch to walk upon all those glittering, discarded shells"
		}
		{
			//DAY 7
			"a silvery haze glittering with malice"
			"here comes the sun"
			"certain shades of the color blue are briefly expected to gain sapience around 16:05 tonight. A full list of the expected wavelengths is available from the usual municipal authorities"
			"violent snowfall through the night, tapering off in the early morning and expecting to be reach sub-lethal levels by noon"
			"a tightness of the skin"
			"countervening solar winds"
		}
		{
			//DAY 8
			"intermittent swarms of locusts"
			"ragged winds, tending towards sharpness at sheer angles. Citizens are encouraged to wear thick coats and keep all bare skin covered."
			"a flurry of insect hatchlings burrowing from beneath the soil and erupting into the sky"
			"intermittent snowfall"
			"glittering rains"
			"peculiar"
		}
		{
			//DAY 9
			"The Harvester of Eyes rides tonight.\w3 Citizens are reminded to thoroughly inspect their decoys\w3 and ensure they are well-maintained\w3, especially if they intend to go out tonight."
			"scattered thunderstorms in the evening.\w5 Witches may rove abroad tonight"
			"erasure of all atmospheric haze.\w6 Citizens should not be alarmed if the horizon looks like\w5, quote\w4 'a bad special effect'\w3"
			"scattered storms with walking lightning and a chance of spontaneous reamination"
			"temperature inversions leading to an ambient sense of suffocation"
			"mild temperatures, with gusts of uncanny music in the higher elevations"
		}
		{
			//DAY 10
			"a swarm of several hovering mouths"
			"lingering animal skins in the early morning, tapering off to the occasional slight drizzle around noon"
			"a low blood pressure front moving in"
			"howling winds that gutter the candles on your mantlepiece"
			"electrical storms that cause home illumination to flicker"
			"dry fog blanketing the land\w5, bedecking the world an unnatural cant"
		}
		{
			//DAY 11
			"the furious sleep of colorless green ideas"
			"toothless flurries in the afternoon"
			"the Heavenly Tiger may place His pawprint on this town tonight. Persons and property are expected to bear no ill effects"
			"the slight misalignment of the stars, just enough to rouse the Old Gods from their slumber, but not enough to free them from their uncanny prisons, leaving them to rend themselves to pieces as they attempt their escape"
			"pregnant mosquitoes"
			"an uncanny whistling on the air that only children can hear"
		}
		{
			//DAY 12
			"a purulescent miasma in the lower elevations"
			"clear for most of the day, becoming irrationally hazy later on"
			"rains of liquid jewels that crystallize upon hitting leaf blades"
			"a heavy mist that presumes to birth collossi"
			"\w4sleet and freezing rain\w8\c[line,1]\w4sleet and freezing rain\w8\c[line,1]\w4sleet and freezing rain"
			"a surge of understanding and excessive empathy"
		}
		{
			//DAY 13
			"sunny, with a chance of scattered cloud hallucinations"
			"the mirage of skeletal warriors limping through the streets, who moan when you reach out to them but otherwise do not respond to your touch"
			"moderate-to-heavy fatigue"
			"the breaking of the chains that bind the planet to its motions, allowing citizens a glimpse into the Great Gin whose shrieks and thews power the dance of the spheres before the damage is repaired"
			"clouds coalesing under ceilings"
			"minimal humidity and blaring sunlight"
		}
		{
			//DAY 14
			"toxic fumes spewing from cracks in the groaning earth that shudder underfoot"
			"patches of small hailstones that rattle one's bones but otherwise have no effect"
			"the bloom from the tiger's tread may seed yet again"
			"the mast of grand kelp"
			"groaning as old oaks rouse from their deep slumber"
			"snow formations.\w7 Citizens should stay on high alert until the all-clear is granted"
		}
		{
			//DAY 15
			"a lack of sunlight.\w5 Citizens should expect to stare upwards into the sky all day and find a welkin of countless twinkling stars poking through a carpet of blackness"
			"acid rainshowers"
			"clear and sonorant night. The humming of the spheres should be especially audible"
			"blue skies and bullet-sharp rainfall"
			"sudden filling of local arroyos with a water-like substance"
			"light metal-drop showers"
		}
		{
			//DAY 16
			"heavy rains and wind gusts of up to %(RAND(17)+2) mph"
			"warm rains that bear the unpleasant odor of gull-sight"
			"mostly clear skies, with occasional glitches. Citizens should not be alarmed"
			"glittering clouds of mites"
			"the sense that the life you are living is not the life you should have\w5, that something, somehow, has rearranged reality such that you are somewhere you were not supposed to be"
			"flurries intermixed with fluttering scaled wings"
		}
		{
			//DAY 17
			"especially noisy rainshowers"
			"the flocking of spears from the heavens. Citizens hit by these darts will experience temporary deaths until the storm passes. As such, all mortuary activity and certification of death will be put on hold."
			"a warm, wet breeze, carrying the slight scent of saliva"
			"a feather-light humming as the bones of wyrms ride beneath the soil"
			"a blue filter when seen through humans or gooseberry eyes"
			"wintry mix featuring unseasonable glitches"
		}
		{
			//DAY 18
			"clear, with the occasional sensual breeze"
			"a murmuration of starlings"
			"ice beams that chill the breast"
			"an openness in all friendship"
			"the feeling of being watched by things that should not bear such intelligence"
			"a wintry mix, becoming rain by the flight of the nighthawks"
		}
		{
			//DAY 19
			"local meteorologists predict an incoming front of semiotically-disruptive waveforms. Municipal neural nets are set up to safely redirect them from reaching citizens on ground level; citizens should nevertheless be alert for symptoms of mild aphasia."
			"timeline flux. Oracles and prediction modelers are allowed to continue business provided they prominently display this disclaimer."
			"the fringes of a dying tropical storm"
			"praise be, for there shall be the descent of lovers from the heavens"
			"the wet cracking sound of grass growing"
			"...and the sky will open up"
		}
		{
			//DAY 20
			"high winds, possibily leading to migratory sand dunes"
			"the devil rides on the far plains"
			"magnetic rippling that makes ones teeth quiver"
			"a green mist along the horizon"
			"cloudy, with wind gusts of moribund dragonflies"
			"from the sun that 'round me rolled in it's autumn tint of gold - from the lightning in the sky as it passed me flying by (when the rest of heaven was blue)"
		}
		{
			//DAY 21
			"partly cloudy apian swarms"
			"the mating of the seasons"
			"the processional march of the souls of the damned. Especially doughty citizens who hear the cries of their loved ones are encouraged to seek out and break the manacles that bind them to the jailor"
			"calcified sleet and freezing rains"
			"a shift in ones' proprioception"
			"a chance of small tornado formation in the morning"
		}
		{
			//DAY 22
			"momentary time loops. Citizens are advised to take thorough notes for later comparison"
			"howling calls.\w5 Beware of frog spawn."
			"anomalous rain showers"
			"winds cold enough to chill one's teeth"
			"pockets of old time\w4, where one can feel ghosts"
			"late-afternoon [REDACTED]"
		}
		{
			//DAY 23
			"radio disru\_q - bzzt - \_q\w5-ons"
			"gamma ray bursts"
			"anomalous light sprinkles"
			"partly-sunny\w8, partly-spaghettification"
			"blacklight fluorescence of mutations"
			"the forbidden weather"
		}
		{
			//DAY 24
			"mild firework-like sparks showering from the sun"
			"effervescent rainbows"
			"a brief storm of eyelessness in the mid-afternoon"
			"unusually hot temperatures"
			"the localized numbing of taste buds\w3 so all\w3 has the sapor of lightly-buttered mashed potatoes"
			"crimes"
		}
		{
			//DAY 25
			"incoming pressure changes leading to heavy fatigue among the human population"
			"otherworldly signals overriding phatic commnication"
			"thunderstorms and the shrieks of foxes through the night"
			"the sense of being watched that is expected to persist for several days"
			"dry, with the red-eyed ululations of loons"
			"risky breezes"
		}
		{
			//DAY 26
			"clouds of irritability. Citizens are reminded to be kind to retail and food service workers, and all employees are reminded that they are entitled to work half days at twice their base rate of pay."
			"a dry spell that may herald an oncoming drought"
			"the bones of the earth may try to reassemble themselves, and possibly generate small earthquakes"
			"winds heavy enough to tip cars"
			"rivers of golden thread snaking from the skies"
			"brisk feathers of dawn-pink flower petals"
		}
		{
			//DAY 27
			"limited visibility around sunset due to haloes lighting upon those fated to die.\w5 All visited by these haloes should make flexible arrangements for transport to local emergency rooms and urgent care centers in the coming month.\w5 Remember:\w4 municipal authorities are aiming for a 75% survivorship rate among the haloed this year\w4, and with the aid of the community\w3, they hope to reach this goal"
			"dry firestorms possible.\w4 Citizens who expect to light matches should take care to ignite them in an oxygen-less environment"
			"dry conditions; be alert for possible wildfires and wily coyotes"
			"the winds will make a pact with the cats, and carry them aloft on witches' brooms"
			"the chattering of gulls"
			"the unopened eye that sees all, plus intermittent showers in the late afternoon"
		}
		{
			//DAY 28
			"potential crackling sounds around wood-burning stoves"
			"condensation of honey-bright gums on right angles"
			"the flesh of trees"
			"%(i)humid%(i0)"
			"rain that falls at shallow angles"
			"rough winds kicking up sandstorms that may coalesce into shards of seaglass"
		}
		{
			//DAY 29
			"mostly sunny with the sky tinged the angiomatic colors of pia mater"
			"possible infection of triangles whose angles sum up to greater than 180°"
			"the echoes of giants"
			"high delusions of immortality all day, only breaking overnight in the early morning"
			"the flooding of the radio waves with advertisements"
			"the shrapnel of the Gotterdammerung"
		}
		{
			//DAY 30
			"partly analog"
			"a steady drizzle over your house and your house only for most of the afternoon"
			"the sudden appearance of rapidly unpeeling oranges"
			"pearlescent clouds bearing wishes"
			"inflammable flyers choking the skies"
			"rains of obsolescent money"
		}
		{
			//DAY 31
			"brief moments of the sensation of weightlessness"
			"the sudden recognition of one's own ephemerality"
			"clear, with moderate violins in the later hours"
			"music that will harmonize with any else that is played"
			"pink-and-blue clouds tasting of candy floss"
			"the sudden aging of all born in leap times"
		}
	}
}


/*
************************************************************************
					Tricky Envelopes
************************************************************************
[Writing] [Advanced]
Write an envelope with both singular and plural entries, and 10 dialogues that make use of it.

Extra credit: As above, but making use of multiple envelopes in each dialogue.
*/

uncanny
{
	"corrosion"
	"the Event"
	"unbroken colors"
	"discordant notes"
	"acids"
	"disagreement"
	"cancelled weather"
	"the broken and the damned"
	"prosody"
	"gold bars"
	"several litres[sic] of blood"
}

gobbledegook
{
	"Ich verstehe nur Bahnhof?" //I just understand train station (German)
	"五里霧中?\w5\nGorimuchuu?" //five-li-fog-in //as if (one is) navigating five li in deep fog" (Japanese)
	"Skjønne ikke bæra?" // I don't understand berries (Norwegian Trondheim/trønder dialect)

}



usersfolder
{
	"start bar"
	"Documents folder"
	"Pictures folder"
	"Music folder"
	"Games folder"
}

filetype
{
	".txt"
	".dic"
	".png"
	".jpg"
	".jpeg"
	".mp3"
	".exe"
	".bat"
	".cfg"
	".wav"
	".pdf"
	".dat"
	".gif"
	".tiff"
	".dll"
	".pna"
	".ico"
	".dau"
	".zip"
	".nar"
	".html"
	".psd"
	".mp4"
	".ttf"
}

//back to useful functions/shortcuts
nowhour //hour12 displays the hour like a 12 hour clock, except for 12 which is displayed as 0
{
	if hour12 == 0; "12"
	else; "%(hour12)"
}

nowmin //Adding a 0 to the minute if it's under 10
{
	if minute < 10; "0%(minute)"
	else; "%(minute)"
}

runmin //Same as above but with the runtime minutes
{
	if runtime[1] < 10; "0%(runtime[1])"
	else; "%(runtime[1])"
}


ap //AM or PM - ampm is 0 during am, and 1 during pm
{
 	if ampm == 0; "AM"
 	else; "PM"
}


wd //Abbreviated week day
{
	if weekday == 0; "Sun"
	elseif weekday == 1; "Mon"
	elseif weekday == 2; "Tue"
	elseif weekday == 3; "Wed"
	elseif weekday == 4; "Thu"
	elseif weekday == 5; "Fri"
	else; "Sat"
}

nowday //Full week day
{
	_day = weekday
	if _argv[0] == "next"
	{
		_day++
		if _day > 6; _day = 0
	}
	if _argv[0] == "last"
	{
		_day--
		if _day < 0; _day = 6
	}
	
	if _day == 0; "Sunday"
	elseif _day == 1; "Monday"
	elseif _day == 2; "Tuesday"
	elseif _day == 3; "Wednesday"
	elseif _day == 4; "Thursday"
	elseif _day == 5; "Friday"
	else; "Saturday"
}

nowmonth //The current month name
{
	_month = month
	if _argv[0] == "next"
	{
		_month++
		if _month > 12; _month = 1
	}
	if _argv[0] == "last"
	{
		_month--
		if _month < 1; _month = 12
	}
	if ISINTSTR(_argv[0]) == 1 || GETTYPE(_argv[0]) == 1
	{
		_month = _argv[0]
	}
	
	if _month == 1; "January"
	elseif _month == 2; "February"
	elseif _month == 3; "March"
	elseif _month == 4; "April"
	elseif _month == 5; "May"
	elseif _month == 6; "June"
	elseif _month == 7; "July"
	elseif _month == 8; "August"
	elseif _month == 9; "September"
	elseif _month == 10; "October"
	elseif _month == 11; "November"
	else; "December"
}

monthmatch
{
	_month = TOLOWER(_argv[0])
	
	if "jan" _in_ _month; "January"
	elseif "feb" _in_ _month; "February"
	elseif "mar" _in_ _month; "March"
	elseif "apr" _in_ _month; "April"
	elseif "may" _in_ _month; "May"
	elseif "jun" _in_ _month; "June"
	elseif "jul" _in_ _month; "July"
	elseif "aug" _in_ _month; "August"
	elseif "sep" _in_ _month; "September"
	elseif "oct" _in_ _month; "October"
	elseif "nov" _in_ _month; "November"
	elseif "dec" _in_ _month; "December"
	else; 0
}

momatch
{
	_month = TOLOWER(_argv[0])
	
	if "jan" _in_ _month; 1
	elseif "feb" _in_ _month; 2
	elseif "mar" _in_ _month; 3
	elseif "apr" _in_ _month; 4
	elseif "may" _in_ _month; 5
	elseif "jun" _in_ _month; 6
	elseif "jul" _in_ _month; 7
	elseif "aug" _in_ _month; 8
	elseif "sep" _in_ _month; 9
	elseif "oct" _in_ _month; 10
	elseif "nov" _in_ _month; 11
	elseif "dec" _in_ _month; 12
	else; 0
}

leapyear //Checks if this is a leap year
{
	_year = year
	if _argv[0] != ""
	{
		_year = _argv[0]
	}
	
	if _year % 4 != 0; 0
	elseif _year % 100 != 0; 1
	elseif _year % 400 != 0; 0
	else; 1
}

md
{
	switch _argv[0]
	{
		""
		31
		{
			if leapyear(_argv[1]); 29
			else; 28
		}
		31
		30
		31
		30
		31
		31
		30
		31
		30
		31
	}
}

tomorrowis
{
	_year = GETTIME()[0]
	_month = GETTIME()[1]
	_day = (GETTIME()[2]+1)
	
	if _argv != ""
	{
		_year = TOINT(_argv[0])
		_month = TOINT(_argv[1])
		_day = (TOINT(_argv[2])+1)
	}
	
	LOGGING("%(_argv[0]), %(_argv[1]), %(_argv[2])===============")
	LOGGING("%_month, %_day, %_year===============")
	
	if (_day) > md(_month)
	{
		_day = 1
		_month = _month+1
		if _month > 12
		{
			_month = 1
			_year += 1
		}
	}
	
	if _argv[0] == ""
	{
		tommonth = _month
		tomday = _day
		tomyear = _year
	}
	_return = (_month,_day,_year)
	
	_return
}


//i altered some times below to make it make more sense to my timekeeping
timeslot //From the GT template. Breaking down the day into a few distinct chunks so you dont have to add checks for every hour.
{
	if hour >= 5 && hour <= 9; "morning" //5-9am
	elseif hour >= 10 && hour <= 11; "latemorning" //10-11am
	elseif hour >= 12 && hour <= 14; "lunch" //12-2pm
	elseif hour >= 15 && hour <= 17; "afternoon" //3-5pm
	elseif hour >= 18 && hour <= 20; "evening" //6-8pm
	elseif hour >= 21 && hour <= 24; "latenight" //9pm-12am
	else; "earlymorning" //1-4am
}

seasonis
{
	_month = GETTIME[1]
	_day = GETTIME[2]
	
	LOGGING("%_month and %_day")
	LOGGING("%_argv")
	
	if _argv[0] != ""
	{
		_month = _argv[0]
		_day = _argv[1]
	}
	
	
	_winter = "winter"
	_spring = "spring"
	_summer = "summer"
	_autumn = "autumn"
	
	if hemisphere == 's'
	{
		LOGGING("it is the southern hemisphere")
		_winter = "summer"
		_spring = "autumn"
		_summer = "winter"
		_autumn = "spring"
	}
	
	_dspr = 21
	_dsum = 21
	_daut = 21
	_dwin = 21
	
	if ISINTSTR(astro_events[0]) == 1
	{
		_dspr = TOINT(astro_events[0])
	}
	if ISINTSTR(astro_events[1]) == 1
	{
		_dsum = TOINT(astro_events[1])
	}
	if ISINTSTR(astro_events[2]) == 1
	{
		_daut = TOINT(astro_events[2])
	}
	if ISINTSTR(astro_events[3]) == 1
	{
		_dwin = TOINT(astro_events[3])
	}
	
	LOGGING("%astro_events")
	LOGGING("%GETTYPE(_dwin)")
	
	switch _month
	{
		"" //nothing for month 0
		_winter
		_winter
		{
			if _day < _dspr
			{
				_winter
			}
			else
			{
				_spring
			}
		}
		_spring
		_spring
		{
			if _day < _dsum
			{
				_spring
			}
			else
			{
				_summer
			}
		}
		_summer
		_summer
		{
			if _day < _daut
			{
				_summer
			}
			else
			{
				_autumn
			}
		}
		_autumn
		_autumn
		{
			if _day < _dwin
			{
				_autumn
			}
			else
			{
				_winter
			}
		}
	}
}

youdidit
{
	"%(a0)Yes!\w3 Exactly!\w3 Good job!\w5"
}

betterlucknexttime
{
	"%(s0)Not knowing is a fair answer.\w4 I may ask again.\w5"
}


//since the Hebrew calendar begins at sunset (or 1800), these three envelopes check whether it is before or after 1800 in order to return the correct Hebrew date
h_d
{
	if hour >= 18; "%(hday6)"
	else; "%(hday)"
}

h_m
{
	if hour >= 18; "%(hmonth6)"
	else; "%(hmonth)"
}

h_y
{
	if hour >= 18; "%(hyear6)"
	else; "%(hyear)"
}

hrom
//I thought having a randomly-generated spelling for Hanukkah was funny
{
	"Ch"
	"H"
	--
	"a"
	--
	"nn"
	"n"
	--
	"u"
	--
	"kk"
	"k"
	--
	"a"
	--
	"h"
	""
}

hbless
{
	if ishanu == 1
	{
		"May you overthrow your oppressors\w6 and may the rebuilding go as smooth as oil."
	}
	elseif ishanu == 8
	{
		"May you always look for the light\w6 and may you always find it."
	}
	else
	{
		_spare = (RAND(6))
		if ASEARCH(hb_yr,_spare) != -1
		{
			switch _spare
			{
				"May you be uncompromising in who you are in the face of adversity."
				"May your community rally by your side\w6 and may your hammer strike true."
				"May your resources go far when times feel lowest."
				"May the strength of your cunning outweigh the bluster of your enemies."
				"May you take strength in those you love and those who love you\w6 and may the latter be more numerous than you fear."
				"May you recognize your victories\w6 and may you never be afraid to celebrate them."
			}
			--
			hb_yr ,= _spare
		}
		else
		{
			"%(hbless)"
		}
	}
}

Select.heard_han
{
	heard_h = 1
}

jour
{
	LOGGING("%GETTYPE(_argv)!===============")
	LOGGING("%_argv is the argument!===============")
	if _argv[0] == ""
	{
		if jmonth > 11 || jmonth < 0
		{
			"temp_veg Today is the %Ord(jdate) Sanculottide,\nthe %(jmd[1]), Year %(jyear)"
		}
		else
		{
			"temp_veg Today is %Capitalize(decadi), the %Ord(jdate) of %(jmd[0]),\nDay of the %(Capitalize(jmd[1])), Year %(jyear)"
		}
	}
	else
	{
		_jmonth = _argv[0]
		_jmd = _argv[1]
		_jdate = _argv[2]
		_jmd[1] = _argv[3]
		_decadi = _argv[4]
		_jyear = _argv[5]
		
		if _jmonth > 11 || _jmonth < 0
		{
			"temp_veg the %Ord(_jdate) Sanculottide,\nthe %(_jmd[1]), Year %(_jyear)"
		}
		else
		{
			"temp_veg %Capitalize(_decadi), the %Ord(_jdate) of %(_jmd[0]),\nDay of the %(Capitalize(_jmd[1])), Year %(_jyear)"
		}
	}
}


OnRomanNumerals
{
	_decimal = _argv[0]
	

	_ones = TOINT(SUBSTR(_decimal,-1,1))
	_tens = TOINT(SUBSTR(_decimal,-2,1))
	_hunds = TOINT(SUBSTR(_decimal,-3,1))
	_thous = TOINT(SUBSTR(_decimal,-4,1))
	
	_onesplace = ("","I","II","III","IV","V","VI","VII","VIII","IX")
	_tensplace = ("","X","XX","XXX","XL","L","LX","LXX","LXXX","XC")
	_hundplace = ("","C","CC","CCC","CD","D","DC","DCC","DCCC","CM")
	_thousplace = ("","M","MM","MMM")
	
	_output = _thousplace[_thous] + _hundplace[_hunds] + _tensplace[_tens] + _onesplace[_ones]
	_output
}

OnRiddleSp
{
	_answer = TOLOWER(reference0)
	if "salt" _in_ _answer && "pepper" _in_ _answer
	{
		"%(youdidit)"
		riddlesp = 1
	}
	else
	{
		"%(betterlucknexttime)"
	}
	--
	"\e"
}

OnRiddleFs
{
	_answer = TOLOWER(reference0)
	if "eighty" _in_ _answer || "80" _in_ _answer
	{
		"%(s0)Ah\w4, aren't we clever?\w5 Technically\w3, you're wrong\w3, given the requirements\w3 (numbers that rhyme\w3, remember)\w5, but I suppose I should accept a synonym.\w6\e"
		riddlefs = 1
	}
	elseif "four score" _in_ _answer
	{
		"%(youdidit)"
		riddlefs = 1
	}
	else
	{
		"%(betterlucknexttime)"
	}
	--
	"\e"
}

Select.wordswordswords
{
	"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
}


Select.dirtybit
{
	goodgollygosh = ("bitch","fuck","prostitute","shit","damn","whore")
}

Select.ssp_downloads
{
    dls = "shell","ghost","balloon","plugin","headline","supplement","ghost with balloon","shell with balloon","calendar skin","package","language"
	fails = "unlha32","extraction","invalid type","artificial","unsupported","password"
	ntw = "timeout","md5 miss","artificial","404 etc.","fileio","readonly","virusdetect","toomanyredirect","executing","param error"
	ntwyey = "none","changed"
	ntwtarg = "ghost","shell","balloon","plugin","headline"
}



//As the name implies, this checks if the balloon is currently open or not. This was written by Levidre!
//To use it I would do this, so you don't have to copy this whole chunk of code:
//_b = BalloonCheck
//if _b == 0 //_b will be 0 if the balloon is not open, or 1 if it is open
BalloonCheck
{
	if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "balloon" _in_ _currentstatus
        {
            1
        }
        else
        {
            0
        }
    }
}

//adapted by Zichqec from Levidre's ballooncheck
MenuCheck
{
    if ASEARCH("Status",var.req.key) != -1
    {
        _currentstatus = var.req.value[ASEARCH("Status",var.req.key)]
        if "choosing" _in_ _currentstatus; 1
        else; 0
    }
    else; 0
}


//This function exists to help make pools of dialogue have not-ridiculous probabilities! Please take a look at the pools in aitalk to get an idea how this works. If you need help with it, there's a full explanation on Zi's website: https://zichqec.github.io/s-the-skeleton/functions.html
Pool
{
    if TOINT(_argv[1]); EVAL("%(_argv[0])")
}

isk
{
	if SHIORI3FW.IsVisible[1] == 1
	{
		""
	}
	else
	{
		"\e"
	}
}

pi
{
	3.14159
}

ROUNDEX
//modified from Steve
{
    _num =_argv[0]
    _to =_argv[1]
	LOGGING("%_num and %(_to)")

    if !_to
	{
        _to=1
	}
	
	if TOINT(_num) == 0
	{
		LOGGING("%_num and %TOINT(_num)")
		_place = _num
		_pv = 0
		//if only a decimal/fraction
		while _pv < 6
		{
			LOGGING(_pv)
			_place *= 10
			if TOINT(_place) != 0
			{
				//done
				LOGGING("%_pv and %_place and break it")
				_to += _pv
				LOGGING("%_to is what i'm setting it to")
				break
			}
			_pv += 1
		}
	}
	
	if GETTYPE(_to) == 1
	{
		_div = POW(10,_to)
		_to = (1/_div)
	}
	
	LOGGING("%_num and %(_to)")
	
    _num *= (1.0/_to)
    _num = ROUND(_num)*_to
	
	if _argv[2] == 'chop'
	{
		_num = (_num,_to)
	}
	
    _num
}

ChopZero
//returns a real number as a string with the proper amount of decimal significant figures
{
	_num = _argv[0]
	
	_sigfigs = _argv[1]
	if !_sigfigs
	{
        _sigfigs = 1
	}
	
	_result = ROUNDEX(_num,_sigfigs,'chop')
	_num = _result[0]
	
	_sigs = _result[1]
	_pv = 0
	
	while TOINT(_sigs) == 0
	{
		_sigs *= 10
		_pv++
		LOGGING("the sum is %(_pv) and the sigs are %(_sigs)")
	}
	
	LOGGING("the number is %(_num) and the sig figs are %(_sigs), %(_sigfigs)")
	
	_num = TOSTR(_num)
	_pos = STRSTR(_num,'.',0)
	
	LOGGING("the place is %(_pv) and the position is %(_pos)")
	
	_pos = _pos + _pv + 1
	
	_len = STRLEN(_num)-_pos
	LOGGING("the number is %(_num); the position is %(_pos), the length is %(_len)")
	_newnum = ERASE(_num,_pos,_len)
	_newnum
}

/*
Flag //Checks to see if a flag exists. Returns 1 if yes, returns 0 if no
{
    if ASEARCH(_argv[0],MiscFlags) != -1; 1
    else; 0
}

RemoveFlag : void //Removes all instances of a flag in the array
{
    _elements = ASEARCHEX(_argv[0],MiscFlags)
    if ARRAYSIZE(_elements) == 0; 0 //If there was no flag to erase
    else
    {
        for _i = ARRAYSIZE(_elements) - 1; _i >= 0; _i-- //Goes from the end of the list to the start, so the elements stay in the same positions while we erase
        {
            _current = _elements[_i]
            MiscFlags[_current] = IARRAY
        }
        1
    }
}

MiscFlags ,= "Whatever flag"
To check if a flag is set, you write  if Flag("Whatever flag")
And to remove a flag, you write RemoveFlag("Whatever flag")
You'll also want to put MiscFlags = IARRAY into OnFirstBoot somewhere, to initialize this
*/

/*
//Written by Zichqec https://zichqec.github.io/s-the-skeleton/

//This function is intended to replace the functionality of an old SAORI(?) that I found and couldn't get working. It lets multiple characters say different things at the same time.

//To call the function, you can either call the function in your code like this:
//Parallel(0,"Dialogue for the Sakura!",1,"Dialogue for the Kero!")
//Or in dialogue like this:
//"%(Parallel(0,'Dialogue for the Sakura!',1,'Dialogue for the Kero!'))"

//You can call any characters, in any order, and in any amount. Every other tag is a character tag, so you should write a number, the dialogue that goes with that number.
//%(Parallel(5,'Char 5 dialogue',37,'Char 37 dialogue',0,'Sakura dialogue',9,'Char 9 dialogue'))

//Please take care when writing the tags. I think I worked out all the infinite loop problems, but if your ghost ever crashes while using this function, do let me know and I'll see what I can do to fix it!

//You cannot write sakurascript tags within the Parallel tag, and if you want to write an apostrophe, you should write it as ##

Parallel
{
	//Initializing variables
	_output = ""
	_chararray = IARRAY
	_textarray = IARRAY
	
	_i = 0
	while _i < _argc //Sorts each argument into characters and dialogue
	{
		_chararray ,= _argv[_i]
		_i++
		_textarray ,= REPLACE(_argv[_i],"##","'") //Changes ## to an apostrophe, change it if you like
		_i++
	}
	--
	while ARRAYSIZE(_chararray) > 0 //Repeats until all dialogues have been outputted
	{
		_i = 0
		_output += "\![quicksection,1]"
		while _i < ARRAYSIZE(_chararray) //Loops through each char and displays a single character of dialogue, erases any dialogues/chars that have become empty
		{
			if STRLEN(_textarray[_i]) == 0
			{
				_chararray[_i] = IARRAY
				_textarray[_i] = IARRAY
				continue
			}
			_output += "\p[" + _chararray[_i] + "]" + SUBSTR(_textarray[_i],0,1)
			_textarray[_i] = ERASE(_textarray[_i],0,1)
			_i++
		}
		_output += "\![quicksection,0]\w1"
	}
	_output
}
*/