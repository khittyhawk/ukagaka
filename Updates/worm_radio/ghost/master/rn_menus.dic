//-------_--_-----__----_---__---_--------_--_----____---__---_---_---_-----
//------/ \/ \---/  \--| |-|  \-| |------/ \/ \--| ___|-|  \-| |-| | | |----
//-----| ^.,^ |-/ /\ \-| |-| . \| |-----| ^.,^ |-| |_---| . \| |-| | | |----
//-----| |--| |-| __ |-| |-| |\   |-----| |--| |-| |__--| |\   |-` \_/ '----
//-----|_|--|_|-|_||_|-|_|-|_|-\__|-----|_|--|_|-|____|-|_|-\__|--`._,'-----



OpenSakuraMenu
{
	"%(noscroll)\b2%(s0)"
	--
	"Hallo and ahoy"
	"...\_qBeep.\_q"
	"Lo.\w3 It speaks!"
	--
	"\n\_q"
	--
	OnMenuRun
}

OnMenuRunPre
{
	kloon = 0
	sloon = 0
	"%(noscroll)\b2%(s0)\_q"
	--
	OnMenuRun
}

OnMenuRun
{
	"\_l[]\n[half]"
	--
	if get_j == "On"
	//Jacobin calendar display
	{
		"\f[align,right]\f[height,80%]temp_veg Today is %Capitalize(decadi), the %Ord(jdate) of %(jmd[0]),\nDay of the %(Capitalize(jmd[1])), Year %(jyear)\n\f[height,default]\f[align,left]"
	}
	--
	if get_h == "On"
	//Hebrew calendar display
	{
		"\f[align,right]\f[height,80%]num_aleph Today is the %Ord(h_d) of %(h_m), %(h_y)"
		--
		if isholiday == 1
		//is it a jewish holiday?
		{
			if ishanu != 0
			{
				if h_d == hday
				{
					"\nThe %Ord(ishanu) day of %(hrom)\n"
				}
				else
				{
					"\nThe %Ord(ishanu) night of %(hrom)\n"
				}
				--
				if (heard_h != 1) && (SHIORI3FW.IsVisible[1] == 1)
				{
					"[half](\q[What's %(hrom)?,explain_h])"
				}
				else
				{
					"\n[25]"
				}
			}
		}
		else
		{
			"\n"
		}
		--
		"\n[25]\f[height,default]\f[align,left]"
	}
	--
	"\![*]\q[Speak!,OnAiTalk,_talkplease]"
	--
	if lastTalk != ""
	{
		"\n\_l[@10em,@-120%]\![*]\q[Say again?,OnLastTalk]"
	}
	--
	"\n\n\![*]\q[Preferences,visualmenu]/
	//Username, Birthday, Shell, (shell animation), alternative calendars, worksafe
	\n\_l[@10em,@-120%]\![*]\q[Settings,settingmenu]\n/
	//talk rate, rambling or not, hourly notifications, set weather, call/shoo kero
	\![*]\q[Tools,funstuff]/
	//say something, balloon test, wait times, birthdays in alternative calendars
	\n\_l[@10em,@-120%]\![*]\q[Functions,functionslol]\n"
	//get weather, clock set, get email, update ssp, update ghost
	--
	if optweather == "On"
	{
		"\n[75]\![*]\q[Cached Weather?,OnWeatherMe]\n"
	}
	elseif optweather == "On?"
	{
		"\n[75]\![*]\q[Forecast...?,weather_less]\n"
	}
	--
	"\![*]\q[%(diskero) Kero,shookero]\n/
	\n\_l[0.5em]\_b[\Dev_Tools\moon\underlayer.png,inline,--option=use_self_alpha,--option=background]\_l[0.5em]a_moon  %Capitalize(dawnduskmenu)  \![*]\q[Cancel,Cancel]     \![*]\q[Goodbye,CloseGhost]"
}


Select.visualmenu
//Preferences
{
	if altcal == ""; {altcal = 0}
	if get_j == ""; {get_j = "Off"}
	if get_h == ""; {get_h = "Off"}
	if washurmouth == ""; {washurmouth = "Fuck yes"}
	if bdate == ""; {bdate = (2,29,1971,'February')}
	
	"%(noscroll)\b2\_q\f[align,center]Preferences\n\n\f[align,left]/
	\![*]\q[Change username?,gonamae]:\n\_l[2em]Now: %(urname)\n/
	\![*]\q[Change birthday?,bbdate]:\n\_l[2em]Now: %(nowmonth(TOSTR(bdate[0]))) %Ord(bdate[1])"
	--
	if bdate[2] > 0
	{
		", %(bdate[2])"
	}
	--
	"\n/
	\![*]\q[Change shell,shellshell]:"
	--
	if shelly == 1
	{
		_output = "\n"
		for _var = 0; _var < labalone; _var++
		{
			_shell = abalone[_var]
			if _shell == SHIORI3FW.ShellName
			{
				_output += "\_l[2em]\q[%_shell,OnShelltering,%_shell] (Current)\n"
			}
			else
			{
				_output += "\_l[2em]\q[%_shell,OnShelltering,%_shell]\n"
			}
		}
		_output
	}
	else
	{
		" %(SHIORI3FW.ShellName)\n"
	}
	--
	if SHIORI3FW.ShellName == "Ship"
	{
		"\![*]\q[Change Animation?,togglespeed]:\n\_l[2em]Currently #%(boatspeed)\n"
	}
	--
	"\![*]\q[Alternative Calendars,othercal]:\n"
	--
	if altcal == 1
	{
		"\_l[2em]\f[height,70%]\q[Explain calendars?,explaincalpls]\n\f[height,default]/
		\_l[2em]\q[Jacobin,get_j] (%(get_j))\n/
		\_l[2em]\q[Hebrew,get_h] (%(get_h))\n"
	}
	--
	"\n\![*]\q[Main Menu,OnMenuRunPre]     \![*]\q[Cancel,Cancel]"
}


Select.settingmenu
//Settings
{
	//setting unset variables w00t!
	if jumpingfrog == ""; {jumpingfrog = "Allowed"}
	if remindhr == ""; {remindhr = "On"}
	
	_autotoggleis = "Off"
	if autoupdates[2] == 1; {_autotoggleis = "On"}
	//is the user has autoupdates on
	
	LOGGING("%_autotoggleis is how we have toggles such=============")
	
	"%(noscroll)\b2\_q\f[align,center]Settings\n\n\f[align,left]/
	\![*]\q[Change talk rate?,toggletalk]:\n\_l[2em]Now: %(talkrate)\n/
	\![*]\q[Enable long-winded rambles?,storytime]:\n\_l[2em]%(jumpingfrog)\n/
	\![*]\q[Keep things worksafe?,fffff]:\n\_l[2em]Currently: %(washurmouth)\n/	
	\![*]\q[Hourly Notifications?,hournotifs]: %(remindhr)\n/
	\![*]\q[Autoupdate Notifications?,autotoggle]: %(_autotoggleis)\n/
	\![*]\q[Weather on the hour?,weatherget]: %(optweather)"
	--
	if STRSTR(optweather,"On")
	{
		"\n\_l[2em]Selected Location: \q[%(curloc[0]) %(curloc[1]),OnLoc]\n"
	}
	else
	{
		"\n"
	}
	--
	if weatherfromnowhere == 1 && optweather != "On?"
	{
		"\_l[2em]\q[Weather from Nowhere?,NowhereWeather]: %(weirdweather)\n"
	}
	--
	"\n\![*]\q[Main Menu,OnMenuRunPre]     \![*]\q[Cancel,Cancel]"
	
}

Select.funstuff
//Tools
{
	"%(noscroll)\b2\_q\f[align,center]Tools\n\n\f[align,left]/
	\![*]\q[To-do List,OnTodo]\n"
	--
	if SHIORI3FW.IsVisible[1] == 1
	{
		_display = ""
		
		if SHIORI3FW.ShellName == "Radio"
		{
			_display = "Call In?"
		}
		else
		{
			_display = "Say something?"
		}
		"\![*]\q[%(_display),talko]\n"
	}
	--
	"\![*]\q[Balloon Test,OnBalloonTest]\n/
	\![*]\q[Test Wait Times,OnTestW]\n"
	--
	if SHIORI3FW.IsVisible[1] == 1 && SHIORI3FW.ShellName == "Radio"
	{
		"\![*]\q[Unit Circle,OnChooseCircle]\n"
	}
	--
	"\![*]\q[Convert Between Calendars?,caltoggle]\n"
	--
	if calconvert == 1
	{
		if get_j == "On"
		{
			"\_l[2em]\q[to Jacobin?,OnFunConvert,Jacobin]\n"
		}
		--
		if get_h == "On"
		{
			"\_l[2em]\q[to Hebrew?,OnFunConvert,Hebrew]\n"
		}
		--
		"\_l[2em]\q[Moon phase?,OnFunConvert,moon phase]\n"
	}
	--
	"\![*]\q[Unit conversions,unitselect]\n/
	\n\![*]\q[Main Menu,OnMenuRunPre]     \![*]\q[Cancel,Cancel]"
}


Select.functionslol
//Functions
{
	_updortSSP = "\![update\,platform\]"
	
	"%(noscroll)\b2\_q\f[align,center]Functions\n\n\f[align,left]/
	\![*]\q[Update Check Ghost,updort]\n/
	\![*]\q[Update Check SSP,script:%_updortSSP]\n/
	\![*]\q[Check Your Clock,OnSNTPCompare]\n/
	\![*]\q[Check Your Email,script:\![biff\]]\n"
	--
	if optweather == "On"
	{
		"\![*]\q[Reload the weather,OnGetSomeWeather,manual]\n"
	}
	--
	"\n\![*]\q[Main Menu,OnMenuRunPre]     \![*]\q[Cancel,Cancel]"
}


Select.shookero
{
	if SHIORI3FW.IsVisible[1] != 1
	{
		diskero = "Shoo"
		"%(k0)"
	}
	elseif SHIORI3FW.IsVisible[1] == 1
	{
		diskero = "Call"
		"\1\s[-1]"
	}
	--
	"\0"
	--
	OnMenuRunPre
}


//--------------------------
//Preferences Menu actions
//--------------------------

//User IDs and such
Select.gonamae
{
	"\![open,inputbox,Onamae,-1]"
}

Onamae
{
	_newname = reference0
	"%(s0)The pact is settled.\w7 %(urname) is cast to ashes.\w7 "
	--
	if TOLOWER(reference0) == "default"
	{
		_newname = "My good bitch"
	}
	--
	"Flames peel the skin from the bones.\w7 %(_newname) walks from the pyre.\e"
	urname = _newname
	--
	Select.visualmenu
	
}

Select.bbdate
{
	"\b2Your birthday is set to %(nowmonth(TOSTR(bdate[0]))) %(bdate[1])"
	--
	if ISINTSTR(bdate[2]) == 1
	{
		", %(bdate[2])"
	}
	--
	". Would you like to change it?\n\n/
	\![*]\q[Enter year\, month\, and day,inputbday]\n/
	\![*]\q[Just the month and the day\, please,enterbday]\n\n/
	\q[Nah\, leave it,visualmenu]\n\_l[10em,@-110%]\q[Cancel,Cancel]"
}

Select.inputbday
{
	_month = TOINT(bdate[0])
	_day = bdate[1]
	_year = TOINT(bdate[2])
	if ISINTSTR(bdate[2]) != 1
	{
		_year = 1971
	}
	--
	"\![open,dateinput,OnEvalBday,-1,%(_year),%(_month),%(_day),--reference='digits']"
	--
	"\_q"
	--
	Select.bbdate
}

Select.enterbday
{
	_month = nowmonth(TOSTR(bdate[0]))
	_day = bdate[1]
	"\![open,inputbox,OnEvalBday,-1,--text=%(_month) %(_day)]"
	--
	"\_q"
	--
	Select.bbdate
}

OnEvalBday
{
	_badinput = "\![open,inputbox,OnEvalBday,-1,--text=Please enter the month and day]"
	_date = (reference0)
	if "digits" _in_ (reference2)
	{
		LOGGING("%(_date[0]), %(_date[1]), %(_date[2])")
		_day = _date[2]
		_month = _date[1]
		_year = _date[0]
		bdate = (_month,_day,_year)
	}
	else
	{
		_datearray = IARRAY
		
		if ARRAYSIZE(SPLIT(_date,'/')) > 1
		{
			_datearray = SPLIT(_date,'/')
		}
		elseif ARRAYSIZE(SPLIT(_date,',')) > 1
		{
			_datearray = SPLIT(_date,',')
		}
		elseif ARRAYSIZE(SPLIT(_date,' ')) > 1
		{
			_datearray = SPLIT(_date,' ')
		}
		else
		{
			_badinput
		}
		--
		if ARRAYSIZE(_datearray) > 2
		{
			_datearray = IARRAY
			_badinput
		}
		--
		//remove extraneous spaces from
		_datearray[0] = CUTSPACE(_datearray[0])
		_datearray[1] = CUTSPACE(_datearray[1])
		
		//if either part of the array matches the first three letters of the month, that's the month!
		if momatch(_datearray[0]) != 0
		{
			if TOINT(_datearray[1]) <= md(bdate[0])
			{
				bdate[0] = momatch(_datearray[0])
				bdate[1] = TOINT(_datearray[1])
			}
			else
			{
				_badinput
			}
		}
		elseif momatch(_datearray[1]) != 0
		{
			if TOINT(_datearray[0]) <= md(bdate[0])
			{
				bdate[0] = momatch(_datearray[1])
				bdate[1] = TOINT(_datearray[0])
			}
			else
			{
				_badinput
			}
		}
		else
		//if neither part of the array contains the first three letters of a month
		{
			
			_datenums[0] = TOINT(_datearray[0])
			_datenums[1] = TOINT(_datearray[1])
			
			if _datenums[0] < 0 || _datenums[1] < 0 || _datenums[0] > 31 || _datenums[1] > 31
			//might as well make sure its in range
			{
				_badinput
			}
			else
			{
				if _datenums[0] > 12
				{
					if _datenums[0] <= md(_datenums[1])
					{
						bdate[1] = _datenums[0]
						bdate[0] = _datenums[1]
					}
					else
					{
						_badinput
					}
				}
				elseif _datenums[1] > 12
				//second verse, same as the first
				{
					if _datenums[1] <= md(_datenums[0])
					{
						bdate[1] = _datenums[1]
						bdate[0] = _datenums[0]
					}
					else
					{
						_badinput
					}
				}
				else
				//if both parts of the array are 12 or below
				//first check for ordination on either
				{
					if ("st" _in_ _datearray[0]) || ("rd" _in_ _datearray[0]) || ("nd" _in_ _datearray[0]) || ("th" _in_ _datearray[0])
					{
						bdate[0] = _datenums[1]
						bdate[1] = _datenums[0]
					}
					else
					//assume the first part of the array is the month
					{
						bdate[0] = _datenums[0]
						bdate[1] = _datenums[1]
					}
				}
			}
			
		}
		--
		bdate[2] = ""
	}
	--
	"\n\_q"
	--
	Select.bbdate
}

//Shells
Select.shellshell
{
	if shelly != 1
	{
		shelly = 1
	}
	else
	{
		shelly = 0
	}
	--
	Select.visualmenu
}

OnShelltering
{
	shelly = 0
	--
	if reference0 == "Ship"
	{
		"\b[12]\![set,balloonalign,left]%(tmo)Note: While the 'Ship of Theseus' shell is\w5, arguably\w5, the intended body of this ghost\w5, it is also a bunch of barely-readable garbage bullshit most likely only amusing to the dev.\w5\w5 Are you sure you want to change to this shell?\n\n/
		
		\_l[1.5em]\_q\q[I'm sure,script:\![change,shell,Ship\]]                     \q[Keep current shell,script:\![raise,Select.visualmenu\]]\_q"
	}
	else
	{
		"\![change,shell,%(reference)]"
	}
}

Select.togglespeed
{
	"\_qCurrent sequence: #%(boatspeed)/
	\![open,sliderinput,OnFast,-1,%(boatspeed),0,9,--option=noclose]/
	\n\n/
	\![*]\q[Preferences,visualmenu] \![*]\q[Cancel,Cancel]"
}

OnFast
{
	boatspeed = reference0
	--
	"\C%(s0)"
	--
	togglespeed
}

//Alternative Calendars
Select.othercal
{
	if altcal != 1
	{
		altcal = 1
	}
	else
	{
		altcal = 0
	}
	--
	Select.visualmenu
}

Select.explaincalpls
{
	"%(noscroll)\b2\_qBy default, SSP uses the Gregorian calendar. I figured I could add in some alternative calendars as well!\n\n/
	Currently, the two available calendars are the French Republican or 'Jacobin' calendar and the Hebrew calendar.\n\n/
	\q[Explain Jacobin,exp_j]\n"
	--
	if exp_j == 1
	{
		"\f[height,90%]\_l[1em]The Jacobin calendar is a decimal, fixed-date calendar in use for slightly over a decade after the French Revolution, starting 1793. Each week has 10 days, and each month has 30 days and each day of the year has a unique name related to the rural economy of the time. Currently, the dev only has a few of these icons drawn, so for the time being, the icon in the menu will be randomly taken from the icons that currently exist.\n/
		\_l[1em]The new year starts on the Autumn Equinox. This ghost comes with a file of the dates of the equinoxes from 1970-2050, taken from NASA's Goddard Institute for Space Studies, available at this link: https://data.giss.nasa.gov/modelE/ar5plots/srvernal.html \n/
		\_l[1em]As this file comes with the ghost, there should be no need for the ghost to download anything to use this calendar.\n\f[height,default]"
	
	}
	--
	"\q[Explain Hebrew,exp_h]\n"
	--
	if exp_h == 1
	{
		"\f[height,90%]\_l[1em]The Hebrew calendar is a lunisolar, semireligious calendar that is very confusing to derive. As such, until the dev can construct a native function for this, the data is taken from the Hebrew Date Converter API put out by Hebcal, which is part of the Open Souce Judaism initiatives.\n/
		\_l[1em]Using this calendar will also show Jewish holidays (currently only Hanukkah) and the ghost may comment on them. The radio can be a bit... irreverent, but no harm is meant.\n/
		\_l[1em]The icon for this calendar is the number of the date in Hebrew characters. Technically, the twenties in Hebrew should have double apostrophes between the two characters, but the dev claims stylization.\n\f[height,default]"
	}
	--
	"\n\![*]\q[Return?,visualmenu]"
}

Select.exp_j
{
	if exp_j != 1
	{
		exp_j = 1
	}
	else
	{
		exp_j = 0
	}
	--
	Select.explaincalpls
}


Select.exp_h
{
	if exp_h != 1
	{
		exp_h = 1
	}
	else
	{
		exp_h = 0
	}
	--
	Select.explaincalpls
}

Select.get_j
{
	if get_j != "On"
	{
		get_j = "On"
		--
		OnJacobinMonths
	}
	else
	{
		get_j = "Off"
	}
	--
	Select.visualmenu
}

Select.get_h
{
	if get_h != "On"
	{
		get_h = "On"
		--
		hcal_change
	}
	else
	{
		get_h = "Off"
	}
	--
	Select.visualmenu
}


//------------------------
//Settings Menu actions
//------------------------

//Talk rate
Select.toggletalk
{
	"\b2\_qChange talk rate?\nCurrently %(talkrate)\n\n/
	\q[Every three minutes,OnChangeTalk,3]\n/
	\q[Every five minutes,OnChangeTalk,5]\n/
	\q[Every ten minutes,OnChangeTalk,10]\n/
	\q[Don't talk at all,OnChangeTalk,0]\n/
	\q[Custom rate?,OnChangeTalk,custom]\n\n/
	\![*]\q[Main Menu,OnMenuRunPre]  \![Settings,settingmenu]"
}

OnChangeTalk
{
	case reference0
	{
		when 3
		{
			talkrate = "every three minutes"
			aitalkinterval = 180
		}
		when 5
		{
			talkrate = "every five minutes"
			aitalkinterval = 300
		}
		when 10
		{
			talkrate = "every ten minutes"
			aitalkinterval = 600
		}
		when 0
		{
			talkrate = "never"
			aitalkinterval = 0
		}
		when "custom"
		{
			"\![open,inputbox,OnChangeTalk,-1,--text=Unspecified intervals are evaluated in minutes]"
		}
		when "Try again"
		{
			"\![open,inputbox,OnChangeTalk,-1]"
		}
		others
		{
			_input = reference0
			_intype = GETTYPE(_input)
			if (_intype == 1) || (_intype == 2) || (ISINTSTR(_input) == 1) || (ISREALSTR(_input == 1))
			{
				_min = (_input*60)
				aitalkinterval = _min
				if _min == 1
				{
					talkrate = "every minute"
				}
				else
				{
					talkrate = "every %_input minutes"
				}
			}
			else
			{
				_rrate = ""
				_rate = ""
				_time = ""
				_newinput = SPLIT(_input,' ')
				_len = ARRAYSIZE(_newinput)
				for _var = 0; _var < _len; _var++
				{
					_sect = _newinput[_var]
					if "min" _in_ _sect
					{
						_rate = "*60"
						_time = "minutes"
					}
					elseif ("hr" _in_ _sect) || ("hour" _in_ _sect)
					{
						_rate = "*60*60"
						_time = "hours"
					}
					elseif "day" _in_ _sect
					{
						_rate = "*60*60*24"
						_time = "days"
					}
					elseif "sec" _in_ _sect
					{
						_time = "seconds"
					}
					elseif ISINTSTR(_sect)
					{
						_rrate = _sect
					}
					elseif ISREALSTR(_sect)
					{
						_rrate = _sect
					}
					else
					{
						//
					}
				}
				_result = EVAL("%_rrate%_rate")
				if (GETTYPE(_result) == 1) || (GETTYPE(_result) == 2)
				{
					aitalkinterval = _result
					talkrate = "every %_rrate %_time"
				}
				else
				{
					"\![open,inputbox,OnChangeTalk,-1,--text=Try again]"
				}
				
			}
		}
	}
	--
	Select.toggletalk
}


//Ramble
Select.storytime
{
	if jumpingfrog != "Allowed"
	{
		jumpingfrog = "Allowed"
	}
	else
	{
		jumpingfrog = "Disabled"
	}
	--
	Select.settingmenu
}

//Dirty bit
Select.fffff
{
	if washurmouth != "Fuck yes"
	{
		washurmouth = "Fuck yes"
	}
	else
	{
		washurmouth = "Fuck no"
	}
	--
	Select.settingmenu
}

//Hour notifications
Select.hournotifs
{
	if remindhr != "On"
	{
		remindhr = "On"
	}
	else
	{
		remindhr = "Off"
	}
	--
	Select.settingmenu
}

//autoupdates toggle
Select.autotoggle
{
	if autoupdates[2] != 0
	{
		autoupdates[2] = 0
	}
	else
	{
		autoupdates[2] = 1
	}
	--
	Select.settingmenu
}
//autoupdates[0] //checks if there's an update available: (1) if yes, (0) if no
//autoupdates[1] //whether the ghost has told the user about the update: (0) if it hasn't; (1) if the user selects 'update later', and (2) if the user selected 'update later' and the day changed over
//autoupdates[2] //turns autoupdates on (1) or off (0) 


//does not exist yet
Select.remindset
{
	if remindme != "Allowed"
	{
		remindme = "Allowed"
	}
	else
	{
		remindme = "Disabled"
	}
	--
	Select.settingmenu
}

//Weather
Select.weatherget
{
	if optweather != "Off"
	{
		optweather = "Off"
	}
	else
	{
		OnWhitherWeather
	}
	--
	Select.settingmenu
}

OnWhitherWeather
{
	"\b2\_q%(s0)Let the %(SHIORI3FW.ShellName) respond to local weather?\n\n"
	--
	if curloc == "" || curloc == " : " || curloc == " "
	{
		"\![*]\q[Enter your location,OnLoc]"
	}
	else
	{
		"Current Location: %(curloc[0]) %(curloc[1])\n/
		\_l[2em]\q[(Not your location?),OnLoc]\n\n/
		\![*]\q[Looks good!,yesweather]"
	}
	--
	"   \![*]\q[Nevermind,settingmenu]\e"
	
}

Select.yesweather
{
	optweather = "On"
	Select.settingmenu
}


Select.NowhereWeather
{
	if weirdweather != "Off"
	{
		weirdweather = "Off"
	}
	else
	{
		weirdweather = "On"
	}
	--
	Select.settingmenu
}

//-----------------------
//Tools Menu actions
//-----------------------


Select.talko
{
	"\![open,inputbox,OnQuest,-1]"
	--
	Select.funstuff
}

OnChooseCircle
{
	"%(s0)\_q\b2%(tmo)If you have the desire for a unit circle, here. Try it out:\n\n/
	\q[Bare Circle,OnUnitCircle,1]\n/
	\q[Angles in terms of pi,OnUnitCircle,2]\n/
	\q[Angles as approximate decimals,OnUnitCircle,3]\n/
	\q[Arctangent,OnUnitCircle,4]\n/
	\q[None,OnUnitCircle,0]\n/
	\n\![*]\q[Back to Tools,funstuff]    \![*]\q[Cancel,Cancel]"
}

Select.caltoggle
{
	if calconvert != 0
	{
		calconvert = 0
	}
	else
	{
		calconvert = 1
	}
	--
	Select.funstuff
}

Select.unitselect
{
	if ISVAR('unitarray') != 1; unitarray = IARRAY

	"%(s0)\b2\_q%(tmo)\f[align,center]Unit conversions\n\f[align,left]\n/
	\![*]\q[Temperature,tempconvmenu]\n/
	\![*]\q[Distance,distconvmenu]\n/
	\![*]\q[Weight,massconvmenu]\n/
	\n\![*]\q[Back to Tools,funstuff]     \![*]\q[Cancel,Cancel]"
}

//-----------------------
//Functions Menu actions
//----------------------


Select.updort
//this is for updorting the ghost
{
	"\![updatebymyself,checkonly]"
	--
	if updortresult[0] == "success"
	{
		"It howls-!\w5\nI call %(updortresult[1]) \![updatebymyself]"
	}
	else
	{
		"It howls its failure, %(updortresult[1])"
	}
}

//------------------------------------

Select.CloseGhost
{
	CloseVars
	OnTimeDifference
	if dayornight == "night" && ((month == bdate[0] && day == bdate[1]) || (RAND(366) < 2))
	{
		"%(s0)\b2The earth rockets around a roiling cauldron of plasma\w5, forever on the edge of plummeting into its tentacled maw\w5, or spiraling into the lifelessness of the void.\w5 All we ever have is each other.\w6 Goodnight\w3, %(urname)."
	}
	"%(s0)Fare well, %(urname)"
	"%(a1)On next week's episode%(lps(6))"
	--
	"\w8\w8\-\e"
}

